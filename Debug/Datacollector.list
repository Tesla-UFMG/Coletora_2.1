
Datacollector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800a214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ed0  24000010  0800a224  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000ee0  0800a224  00020ee0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a9aa  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ad6  00000000  00000000  0003a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001518  00000000  00000000  0003d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000013f0  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039550  00000000  00000000  0003fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019129  00000000  00000000  00079318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00179c3f  00000000  00000000  00092441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0020c080  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005bb8  00000000  00000000  0020c0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a180 	.word	0x0800a180

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800a180 	.word	0x0800a180

080002d8 <HAL_TIM_PeriodElapsedCallback>:
/*
 * @brief  Função chamada periodicamente para medir a(s) entrada(s) analogica(s)
 * @param  htim: Handle do TIMER || normalmente "htim1"
 * @retval ***NONE***
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	/* Inicia a converção, e armazena na memória logo após terminar a conversão*/
	HAL_ADC_Start_DMA(&hadc1, ADC_value, 3);
 80002e0:	2203      	movs	r2, #3
 80002e2:	4904      	ldr	r1, [pc, #16]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002e6:	f001 fb4d 	bl	8001984 <HAL_ADC_Start_DMA>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2400002c 	.word	0x2400002c
 80002f8:	24000d0c 	.word	0x24000d0c

080002fc <TIM_Configure_Init>:
/**
 * @brief  Inicialização do timer necessário para leitura do ADC
 * @param  ***NONE***
 * @retval ***NONE***
 */
void TIM_Configure_Init(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
	/* Variável para configuração do tipo de clock do timer */
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
	/* Variável para configuração do modo de trigger e dominância */
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]

	/* Configura os parametros do TIMER - LEITURA DO DATASHEET */
	htim1.Instance = TIM1;
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <TIM_Configure_Init+0xa0>)
 800031c:	4a20      	ldr	r2, [pc, #128]	; (80003a0 <TIM_Configure_Init+0xa4>)
 800031e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000;
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <TIM_Configure_Init+0xa0>)
 8000322:	f242 7210 	movw	r2, #10000	; 0x2710
 8000326:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b1c      	ldr	r3, [pc, #112]	; (800039c <TIM_Configure_Init+0xa0>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1;
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <TIM_Configure_Init+0xa0>)
 8000330:	2201      	movs	r2, #1
 8000332:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <TIM_Configure_Init+0xa0>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <TIM_Configure_Init+0xa0>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <TIM_Configure_Init+0xa0>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]

	/* Inicializa o TIMER com os parâmetros definidos */
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000346:	4815      	ldr	r0, [pc, #84]	; (800039c <TIM_Configure_Init+0xa0>)
 8000348:	f009 f9ec 	bl	8009724 <HAL_TIM_Base_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <TIM_Configure_Init+0x5a>
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000352:	f000 fc13 	bl	8000b7c <Error_Handler>
	}
	/* Define o tipo de clock */
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035a:	613b      	str	r3, [r7, #16]

	/* Inicializa o clock do TIMER */
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	480e      	ldr	r0, [pc, #56]	; (800039c <TIM_Configure_Init+0xa0>)
 8000364:	f009 fbce 	bl	8009b04 <HAL_TIM_ConfigClockSource>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <TIM_Configure_Init+0x76>
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 800036e:	f000 fc05 	bl	8000b7c <Error_Handler>
	}

	/* Configura o modo de trigger e dominâcia */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE; //CONFIGURAÇÃO DO MODO DO 1°TRIGGER
 8000372:	2320      	movs	r3, #32
 8000374:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET; //CONFIGURAÇÃO DO MODO DO 2°TRIGGER
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; //CONFIGURAÇÃO DE DOMINÂNCIA
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]

	/* Inicializa o modo de operação do TIMER */
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <TIM_Configure_Init+0xa0>)
 8000384:	f009 fe16 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <TIM_Configure_Init+0x96>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 800038e:	f000 fbf5 	bl	8000b7c <Error_Handler>
	}

}
 8000392:	bf00      	nop
 8000394:	3720      	adds	r7, #32
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	24000e88 	.word	0x24000e88
 80003a0:	40010000 	.word	0x40010000

080003a4 <ADC_Init>:
/**
 * @brief  Inicialização da(s) entrada(s) ADC
 * @param  ***NONE***
 * @retval ***NONE***
 */
void ADC_Init() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	/* Chama a função de configuração do TIMER */
	TIM_Configure_Init();
 80003a8:	f7ff ffa8 	bl	80002fc <TIM_Configure_Init>

	/* Calibra as entradas ADC */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED)
 80003ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80003b0:	2100      	movs	r1, #0
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <ADC_Init+0x34>)
 80003b4:	f002 f9fa 	bl	80027ac <HAL_ADCEx_Calibration_Start>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <ADC_Init+0x1e>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80003be:	f000 fbdd 	bl	8000b7c <Error_Handler>
	}

	/* Inicia o TIMER */
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK) {
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <ADC_Init+0x38>)
 80003c4:	f009 fa06 	bl	80097d4 <HAL_TIM_Base_Start_IT>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <ADC_Init+0x2e>
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80003ce:	f000 fbd5 	bl	8000b7c <Error_Handler>
	}
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	24000d0c 	.word	0x24000d0c
 80003dc:	24000e88 	.word	0x24000e88

080003e0 <HAL_FDCAN_RxFifo0Callback>:
 * @brief  Função chamada quando detectado uma mensagem no barramento da CAN
 * @param  hfdcan: Handle da CAN || normalmente "hfdcan1"
 * @param  RxFifo0ITs: FIFO de interrupção utilizado
 * @retval ***NONE***
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	/* Pisca o  LED 2 caso tenha algo para receber pela CAN */
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80003ea:	2108      	movs	r1, #8
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80003ee:	f006 f82a 	bl	8006446 <HAL_GPIO_TogglePin>

	/* Pega as informações e dados da CAN, e armazena respectivamente em RxHeader e RxData */
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80003f4:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	480e      	ldr	r0, [pc, #56]	; (8000434 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80003fa:	f004 ff65 	bl	80052c8 <HAL_FDCAN_GetRxMessage>

	/* Chama a função de tratamento de dados */
	canMessageReceived(RxHeader.Identifier, RxData);
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	b29b      	uxth	r3, r3
 8000404:	4909      	ldr	r1, [pc, #36]	; (800042c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f8e0 	bl	80005cc <canMessageReceived>

	/* Ativa novamente a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 800040c:	2200      	movs	r2, #0
 800040e:	2101      	movs	r1, #1
 8000410:	4808      	ldr	r0, [pc, #32]	; (8000434 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000412:	f005 f8c7 	bl	80055a4 <HAL_FDCAN_ActivateNotification>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <HAL_FDCAN_RxFifo0Callback+0x40>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 800041c:	f000 fbae 	bl	8000b7c <Error_Handler>
	}
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	58021000 	.word	0x58021000
 800042c:	24000d04 	.word	0x24000d04
 8000430:	24000cdc 	.word	0x24000cdc
 8000434:	24000de8 	.word	0x24000de8

08000438 <CAN_Configure_Init>:
/**
 * @brief  Configura a CAN, overwrite do .IOC
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Configure_Init() {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	/* Configura os parâmetros da CAN - LEITURA DO DATASHEET */
	hfdcan1.Instance = FDCAN1;
 800043c:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800043e:	4a2f      	ldr	r2, [pc, #188]	; (80004fc <CAN_Configure_Init+0xc4>)
 8000440:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000442:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 800044e:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000450:	2200      	movs	r2, #0
 8000452:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000456:	2200      	movs	r2, #0
 8000458:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800045c:	2200      	movs	r2, #0
 800045e:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 8000460:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000462:	2201      	movs	r2, #1
 8000464:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000468:	2202      	movs	r2, #2
 800046a:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 13;
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800046e:	220d      	movs	r2, #13
 8000470:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000474:	2202      	movs	r2, #2
 8000476:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000478:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800047a:	2201      	movs	r2, #1
 800047c:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 2;
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000480:	2202      	movs	r2, #2
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 13;
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000486:	220d      	movs	r2, #13
 8000488:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800048c:	2202      	movs	r2, #2
 800048e:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000492:	2200      	movs	r2, #0
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <CAN_Configure_Init+0xc0>)
 8000498:	2200      	movs	r2, #0
 800049a:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <CAN_Configure_Init+0xc0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004a4:	2220      	movs	r2, #32
 80004a6:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004b0:	2220      	movs	r2, #32
 80004b2:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 32;
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004bc:	2220      	movs	r2, #32
 80004be:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004c2:	2204      	movs	r2, #4
 80004c4:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 32;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004c8:	2220      	movs	r2, #32
 80004ca:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 32;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004ce:	2220      	movs	r2, #32
 80004d0:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004d4:	2220      	movs	r2, #32
 80004d6:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	669a      	str	r2, [r3, #104]	; 0x68

	/* Inicializa a CAN com os parâmetros definidos */
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <CAN_Configure_Init+0xc0>)
 80004e6:	f004 fc8b 	bl	8004e00 <HAL_FDCAN_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <CAN_Configure_Init+0xbc>
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80004f0:	f000 fb44 	bl	8000b7c <Error_Handler>
	}
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	24000de8 	.word	0x24000de8
 80004fc:	4000a000 	.word	0x4000a000

08000500 <Clean_CAN_vector>:
/**
 * @brief  Inicialização do vetor de dados da CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void Clean_CAN_vector(void) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
	/* Zera cada posição do vetor de dados - Redundância */
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	e019      	b.n	8000540 <Clean_CAN_vector+0x40>
		can_vector[i].word_0 = 0;
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <Clean_CAN_vector+0x58>)
 8000510:	2100      	movs	r1, #0
 8000512:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <Clean_CAN_vector+0x58>)
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	4413      	add	r3, r2
 800051e:	2200      	movs	r2, #0
 8000520:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <Clean_CAN_vector+0x58>)
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4413      	add	r3, r2
 800052a:	2200      	movs	r2, #0
 800052c:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <Clean_CAN_vector+0x58>)
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	4413      	add	r3, r2
 8000536:	2200      	movs	r2, #0
 8000538:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	3301      	adds	r3, #1
 800053e:	80fb      	strh	r3, [r7, #6]
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000546:	d3e1      	bcc.n	800050c <Clean_CAN_vector+0xc>
	}
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	24000038 	.word	0x24000038

0800055c <CAN_Init>:
/**
 * @brief  Inicialização da comunicação via CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Init() {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	/* Chama a função de configuração dos parâmetros da CAN */
	CAN_Configure_Init();
 8000560:	f7ff ff6a 	bl	8000438 <CAN_Configure_Init>

	/* Chama a função de limpeza do vetor de armazenamento de dados */
	Clean_CAN_vector();
 8000564:	f7ff ffcc 	bl	8000500 <Clean_CAN_vector>

	/* Começa a comunicação via CAN */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <CAN_Init+0x68>)
 800056a:	f004 fe27 	bl	80051bc <HAL_FDCAN_Start>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <CAN_Init+0x1c>
		//Caso de errado, chama a função de erro
		Error_Handler();
 8000574:	f000 fb02 	bl	8000b7c <Error_Handler>
	}

	/* Ativa a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <CAN_Init+0x68>)
 800057e:	f005 f811 	bl	80055a4 <HAL_FDCAN_ActivateNotification>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <CAN_Init+0x30>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000588:	f000 faf8 	bl	8000b7c <Error_Handler>
	}

	/* Configura os parametros para envio de mensagem */
	TxHeader.IdType = FDCAN_STANDARD_ID; //TIPO DE IDENTIFICADOR - STANDARD OU EXTENDED
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <CAN_Init+0x6c>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; //TIPO DE FLAME - DATA OU REMOTE
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <CAN_Init+0x6c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8; //TAMANHO DOS DADOS - 0 A 64 WORDS - CONVERTIDO PRA 4
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <CAN_Init+0x6c>)
 800059a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800059e:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //INDICADOR DE ERRO - ATIVO OU PASSIVO
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <CAN_Init+0x6c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF; //BIT DE INTERRUPÇÃO - ON OU OFF
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <CAN_Init+0x6c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN; //TIPO DE CAN - NORMAL OU FDCAN
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <CAN_Init+0x6c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // ARMAZENAMENTO DE EVENTOS DE ENVIO - ON OU OFF
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <CAN_Init+0x6c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0; //MASCARA DA MENSAGEM - 0 A 0xFF
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <CAN_Init+0x6c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	24000de8 	.word	0x24000de8
 80005c8:	24000cb8 	.word	0x24000cb8

080005cc <canMessageReceived>:
 * @brief  Função de tratamento das mensagens recebidas
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void canMessageReceived(uint16_t ID, uint8_t *DATA) {
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	80fb      	strh	r3, [r7, #6]
	/* Caso o ID passe do maior valor, a função quebra */
	if (ID > CAN_IDS_NUMBER - 1)
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005de:	d220      	bcs.n	8000622 <canMessageReceived+0x56>
		return;
	/* Converte os dados que chegam em 'byte' (uint8_t), em uma 'word' (uint16_t) */
	uint16_t *data_word = (uint16_t*) DATA;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	60fb      	str	r3, [r7, #12]
	/* Armazena os dados no vetor */
	can_vector[ID].word_0 = data_word[0];
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	8811      	ldrh	r1, [r2, #0]
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <canMessageReceived+0x64>)
 80005ec:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[ID].word_1 = data_word[1];
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	8851      	ldrh	r1, [r2, #2]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <canMessageReceived+0x64>)
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	4413      	add	r3, r2
 80005fc:	460a      	mov	r2, r1
 80005fe:	805a      	strh	r2, [r3, #2]
	can_vector[ID].word_2 = data_word[2];
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	8891      	ldrh	r1, [r2, #4]
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <canMessageReceived+0x64>)
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4413      	add	r3, r2
 800060c:	460a      	mov	r2, r1
 800060e:	809a      	strh	r2, [r3, #4]
	can_vector[ID].word_3 = data_word[3];
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	88d1      	ldrh	r1, [r2, #6]
 8000616:	4a06      	ldr	r2, [pc, #24]	; (8000630 <canMessageReceived+0x64>)
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4413      	add	r3, r2
 800061c:	460a      	mov	r2, r1
 800061e:	80da      	strh	r2, [r3, #6]
 8000620:	e000      	b.n	8000624 <canMessageReceived+0x58>
		return;
 8000622:	bf00      	nop
}
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	24000038 	.word	0x24000038

08000634 <CAN_TxData>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_TxData(uint16_t id, uint16_t *data) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	80fb      	strh	r3, [r7, #6]
	/* Armazena o identificador da mensagem no struct de informação (TxHeader) */
	TxHeader.Identifier = id;
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <CAN_TxData+0x30>)
 8000644:	6013      	str	r3, [r2, #0]
	/* Envia os dados recebidos na chamada (data) pela CAN, de acordo com as informações de TxHeader */
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*) data)
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	4906      	ldr	r1, [pc, #24]	; (8000664 <CAN_TxData+0x30>)
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <CAN_TxData+0x34>)
 800064c:	f004 fde1 	bl	8005212 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <CAN_TxData+0x26>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000656:	f000 fa91 	bl	8000b7c <Error_Handler>
	}
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	24000cb8 	.word	0x24000cb8
 8000668:	24000de8 	.word	0x24000de8

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fd16 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f826 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fa1e 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 800067c:	f000 f9fc 	bl	8000a78 <MX_DMA_Init>
  MX_ADC1_Init();
 8000680:	f000 f8a6 	bl	80007d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000684:	f000 f9a4 	bl	80009d0 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000688:	f000 f93e 	bl	8000908 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
	ADC_Init();
 800068c:	f7ff fe8a 	bl	80003a4 <ADC_Init>
	CAN_Init();
 8000690:	f7ff ff64 	bl	800055c <CAN_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000694:	2104      	movs	r1, #4
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0x4c>)
 8000698:	f005 fed5 	bl	8006446 <HAL_GPIO_TogglePin>
		TxData[0] = ADC_value[0];
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <main+0x50>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <main+0x54>)
 80006a4:	801a      	strh	r2, [r3, #0]
		CAN_TxData(101, TxData);
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <main+0x54>)
 80006a8:	2065      	movs	r0, #101	; 0x65
 80006aa:	f7ff ffc3 	bl	8000634 <CAN_TxData>
		HAL_Delay(50);
 80006ae:	2032      	movs	r0, #50	; 0x32
 80006b0:	f000 fd88 	bl	80011c4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80006b4:	e7ee      	b.n	8000694 <main+0x28>
 80006b6:	bf00      	nop
 80006b8:	58021000 	.word	0x58021000
 80006bc:	2400002c 	.word	0x2400002c
 80006c0:	24000ed4 	.word	0x24000ed4

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	; 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	224c      	movs	r2, #76	; 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f009 fd4c 	bl	800a170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 fd46 	bl	800a170 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f005 fec9 	bl	800647c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <SystemClock_Config+0x100>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	4a34      	ldr	r2, [pc, #208]	; (80007c4 <SystemClock_Config+0x100>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <SystemClock_Config+0x100>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <SystemClock_Config+0x104>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <SystemClock_Config+0x104>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <SystemClock_Config+0x104>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000720:	bf00      	nop
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SystemClock_Config+0x104>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072e:	d1f8      	bne.n	8000722 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <SystemClock_Config+0x108>)
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	f023 0303 	bic.w	r3, r3, #3
 8000738:	4a24      	ldr	r2, [pc, #144]	; (80007cc <SystemClock_Config+0x108>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	2302      	movs	r3, #2
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000756:	2332      	movs	r3, #50	; 0x32
 8000758:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800075e:	2308      	movs	r3, #8
 8000760:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 10;
 8000762:	230a      	movs	r3, #10
 8000764:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000766:	230c      	movs	r3, #12
 8000768:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076a:	2300      	movs	r3, #0
 800076c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4618      	mov	r0, r3
 8000778:	f005 feba 	bl	80064f0 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9fb 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	233f      	movs	r3, #63	; 0x3f
 8000788:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 800078e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2102      	movs	r1, #2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 facd 	bl	8006d4c <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80007b8:	f000 f9e0 	bl	8000b7c <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3770      	adds	r7, #112	; 0x70
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58000400 	.word	0x58000400
 80007c8:	58024800 	.word	0x58024800
 80007cc:	58024400 	.word	0x58024400

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f4:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <MX_ADC1_Init+0x124>)
 80007f6:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <MX_ADC1_Init+0x128>)
 80007f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007fa:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_ADC1_Init+0x124>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B_OPT;
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000802:	2218      	movs	r2, #24
 8000804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_ADC1_Init+0x124>)
 800080e:	2208      	movs	r2, #8
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000814:	2200      	movs	r2, #0
 8000816:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_ADC1_Init+0x124>)
 800081a:	2200      	movs	r2, #0
 800081c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000820:	2203      	movs	r2, #3
 8000822:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000826:	2200      	movs	r2, #0
 8000828:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <MX_ADC1_Init+0x124>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000838:	2201      	movs	r2, #1
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_ADC1_Init+0x124>)
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_ADC1_Init+0x124>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000850:	4828      	ldr	r0, [pc, #160]	; (80008f4 <MX_ADC1_Init+0x124>)
 8000852:	f000 fef5 	bl	8001640 <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 f98e 	bl	8000b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_ADC1_Init+0x124>)
 800086c:	f002 f802 	bl	8002874 <HAL_ADCEx_MultiModeConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000876:	f000 f981 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_ADC1_Init+0x12c>)
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087e:	2306      	movs	r3, #6
 8000880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000886:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088c:	2304      	movs	r3, #4
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4815      	ldr	r0, [pc, #84]	; (80008f4 <MX_ADC1_Init+0x124>)
 800089e:	f001 f953 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008a8:	f000 f968 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_ADC1_Init+0x130>)
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008b0:	230c      	movs	r3, #12
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_ADC1_Init+0x124>)
 80008be:	f001 f943 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80008c8:	f000 f958 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_ADC1_Init+0x134>)
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008d0:	2312      	movs	r3, #18
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80008d4:	2302      	movs	r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_ADC1_Init+0x124>)
 80008de:	f001 f933 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80008e8:	f000 f948 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	24000d0c 	.word	0x24000d0c
 80008f8:	40022000 	.word	0x40022000
 80008fc:	0c900008 	.word	0x0c900008
 8000900:	10c00010 	.word	0x10c00010
 8000904:	3ef08000 	.word	0x3ef08000

08000908 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <MX_FDCAN1_Init+0xc4>)
 8000910:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000918:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800092c:	2200      	movs	r2, #0
 800092e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000932:	2201      	movs	r2, #1
 8000934:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000938:	2202      	movs	r2, #2
 800093a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800093e:	220d      	movs	r2, #13
 8000940:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000944:	2202      	movs	r2, #2
 8000946:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800094a:	2201      	movs	r2, #1
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000950:	2202      	movs	r2, #2
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000956:	220d      	movs	r2, #13
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800095c:	2202      	movs	r2, #2
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000974:	2220      	movs	r2, #32
 8000976:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800097a:	2204      	movs	r2, #4
 800097c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000980:	2220      	movs	r2, #32
 8000982:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000986:	2204      	movs	r2, #4
 8000988:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800098c:	2220      	movs	r2, #32
 800098e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000992:	2204      	movs	r2, #4
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 8000998:	2220      	movs	r2, #32
 800099a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 800099e:	2220      	movs	r2, #32
 80009a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 80009a4:	2220      	movs	r2, #32
 80009a6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_FDCAN1_Init+0xc0>)
 80009b6:	f004 fa23 	bl	8004e00 <HAL_FDCAN_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80009c0:	f000 f8dc 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	24000de8 	.word	0x24000de8
 80009cc:	4000a000 	.word	0x4000a000

080009d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_TIM1_Init+0xa0>)
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <MX_TIM1_Init+0xa4>)
 80009f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM1_Init+0xa0>)
 80009f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80009fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_TIM1_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1a:	4815      	ldr	r0, [pc, #84]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a1c:	f008 fe82 	bl	8009724 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a26:	f000 f8a9 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a38:	f009 f864 	bl	8009b04 <HAL_TIM_ConfigClockSource>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a42:	f000 f89b 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a46:	2320      	movs	r3, #32
 8000a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_TIM1_Init+0xa0>)
 8000a58:	f009 faac 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a62:	f000 f88b 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000e88 	.word	0x24000e88
 8000a74:	40010000 	.word	0x40010000

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f002 f8a0 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f002 f8b7 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|GPIO_PIN_3|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	213c      	movs	r1, #60	; 0x3c
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <MX_GPIO_Init+0xc0>)
 8000b4c:	f005 fc62 	bl	8006414 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin PE3 LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_3|LED2_Pin|LED3_Pin;
 8000b50:	233c      	movs	r3, #60	; 0x3c
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_GPIO_Init+0xc0>)
 8000b68:	f005 faa4 	bl	80060b4 <HAL_GPIO_Init>

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58021000 	.word	0x58021000

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2120      	movs	r1, #32
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <Error_Handler+0x18>)
 8000b8a:	f005 fc43 	bl	8006414 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58021000 	.word	0x58021000

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x38>)
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_MspInit+0x38>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x38>)
 8000bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f06f 0001 	mvn.w	r0, #1
 8000bc4:	f002 f80f 	bl	8002be6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0ba      	sub	sp, #232	; 0xe8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	22bc      	movs	r2, #188	; 0xbc
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f009 fabb 	bl	800a170 <memset>
  if(hadc->Instance==ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a51      	ldr	r2, [pc, #324]	; (8000d44 <HAL_ADC_MspInit+0x170>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	f040 809b 	bne.w	8000d3c <HAL_ADC_MspInit+0x168>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000c10:	2350      	movs	r3, #80	; 0x50
 8000c12:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c24:	2320      	movs	r3, #32
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f006 fbe8 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000c42:	f7ff ff9b 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c4c:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c56:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	f003 0320 	and.w	r3, r3, #32
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HAL_ADC_MspInit+0x174>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ca0:	2348      	movs	r3, #72	; 0x48
 8000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4824      	ldr	r0, [pc, #144]	; (8000d4c <HAL_ADC_MspInit+0x178>)
 8000cba:	f005 f9fb 	bl	80060b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481e      	ldr	r0, [pc, #120]	; (8000d50 <HAL_ADC_MspInit+0x17c>)
 8000cd8:	f005 f9ec 	bl	80060b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_ADC_MspInit+0x184>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d22:	f001 ff95 	bl	8002c50 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_ADC_MspInit+0x15c>
    {
      Error_Handler();
 8000d2c:	f7ff ff26 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_ADC_MspInit+0x180>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37e8      	adds	r7, #232	; 0xe8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40022000 	.word	0x40022000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020000 	.word	0x58020000
 8000d50:	58020800 	.word	0x58020800
 8000d54:	24000d70 	.word	0x24000d70
 8000d58:	40020010 	.word	0x40020010

08000d5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b8      	sub	sp, #224	; 0xe0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22bc      	movs	r2, #188	; 0xbc
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 f9f7 	bl	800a170 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <HAL_FDCAN_MspInit+0xe0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d152      	bne.n	8000e32 <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fb36 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8000da6:	f7ff fee9 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_FDCAN_MspInit+0xe4>)
 8000dac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000db0:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_FDCAN_MspInit+0xe4>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_FDCAN_MspInit+0xe4>)
 8000dbc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_FDCAN_MspInit+0xe4>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <HAL_FDCAN_MspInit+0xe4>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_FDCAN_MspInit+0xe4>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000de6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e00:	2309      	movs	r3, #9
 8000e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <HAL_FDCAN_MspInit+0xe8>)
 8000e0e:	f005 f951 	bl	80060b4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2105      	movs	r1, #5
 8000e16:	2013      	movs	r0, #19
 8000e18:	f001 fee5 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f001 fefc 	bl	8002c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2015      	movs	r0, #21
 8000e28:	f001 fedd 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f001 fef4 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	37e0      	adds	r7, #224	; 0xe0
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	4000a000 	.word	0x4000a000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020000 	.word	0x58020000

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_TIM_Base_MspInit+0x48>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d116      	bne.n	8000e88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_TIM_Base_MspInit+0x4c>)
 8000e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_TIM_Base_MspInit+0x4c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_TIM_Base_MspInit+0x4c>)
 8000e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2019      	movs	r0, #25
 8000e7e:	f001 feb2 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e82:	2019      	movs	r0, #25
 8000e84:	f001 fec9 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010000 	.word	0x40010000
 8000e94:	58024400 	.word	0x58024400

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f94e 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Stream0_IRQHandler+0x10>)
 8000ef2:	f002 fc73 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	24000d70 	.word	0x24000d70

08000f00 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <FDCAN1_IT0_IRQHandler+0x10>)
 8000f06:	f004 fbc7 	bl	8005698 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000de8 	.word	0x24000de8

08000f14 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f1a:	f004 fbbd 	bl	8005698 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000de8 	.word	0x24000de8

08000f28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM1_UP_IRQHandler+0x10>)
 8000f2e:	f008 fcc9 	bl	80098c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000e88 	.word	0x24000e88

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <SystemInit+0xe4>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a36      	ldr	r2, [pc, #216]	; (8001020 <SystemInit+0xe4>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f50:	4b34      	ldr	r3, [pc, #208]	; (8001024 <SystemInit+0xe8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 030f 	and.w	r3, r3, #15
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d807      	bhi.n	8000f6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <SystemInit+0xe8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <SystemInit+0xe8>)
 8000f66:	f043 0307 	orr.w	r3, r3, #7
 8000f6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <SystemInit+0xec>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <SystemInit+0xec>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <SystemInit+0xec>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <SystemInit+0xec>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4929      	ldr	r1, [pc, #164]	; (8001028 <SystemInit+0xec>)
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <SystemInit+0xf0>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <SystemInit+0xe8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <SystemInit+0xe8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 030f 	bic.w	r3, r3, #15
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <SystemInit+0xe8>)
 8000fa0:	f043 0307 	orr.w	r3, r3, #7
 8000fa4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <SystemInit+0xec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <SystemInit+0xec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <SystemInit+0xec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <SystemInit+0xec>)
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <SystemInit+0xf4>)
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <SystemInit+0xec>)
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <SystemInit+0xf8>)
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <SystemInit+0xec>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <SystemInit+0xfc>)
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <SystemInit+0xec>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <SystemInit+0xec>)
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <SystemInit+0xfc>)
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <SystemInit+0xec>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <SystemInit+0xec>)
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <SystemInit+0xfc>)
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <SystemInit+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <SystemInit+0xec>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <SystemInit+0xec>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <SystemInit+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <SystemInit+0x100>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <SystemInit+0x104>)
 8001000:	4013      	ands	r3, r2
 8001002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001006:	d202      	bcs.n	800100e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <SystemInit+0x108>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SystemInit+0x10c>)
 8001010:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001014:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	52002000 	.word	0x52002000
 8001028:	58024400 	.word	0x58024400
 800102c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001030:	02020200 	.word	0x02020200
 8001034:	01ff0000 	.word	0x01ff0000
 8001038:	01010280 	.word	0x01010280
 800103c:	5c001000 	.word	0x5c001000
 8001040:	ffff0000 	.word	0xffff0000
 8001044:	51008108 	.word	0x51008108
 8001048:	52004000 	.word	0x52004000

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001050:	f7ff ff74 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f009 f847 	bl	800a10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff faf5 	bl	800066c <main>
  bx  lr
 8001082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001088:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800108c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001090:	0800a214 	.word	0x0800a214
  ldr r2, =_sbss
 8001094:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001098:	24000ee0 	.word	0x24000ee0

0800109c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC3_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f001 fd92 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ac:	f006 f804 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_Init+0x68>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	4913      	ldr	r1, [pc, #76]	; (800110c <HAL_Init+0x6c>)
 80010be:	5ccb      	ldrb	r3, [r1, r3]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_Init+0x68>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_Init+0x6c>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_Init+0x70>)
 80010e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_Init+0x74>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f814 	bl	8001118 <HAL_InitTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e002      	b.n	8001100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010fa:	f7ff fd4d 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	58024400 	.word	0x58024400
 800110c:	0800a1e4 	.word	0x0800a1e4
 8001110:	24000004 	.word	0x24000004
 8001114:	24000000 	.word	0x24000000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_InitTick+0x60>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e021      	b.n	8001170 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_InitTick+0x64>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_InitTick+0x60>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fd77 	bl	8002c36 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f001 fd41 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x68>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2400000c 	.word	0x2400000c
 800117c:	24000000 	.word	0x24000000
 8001180:	24000008 	.word	0x24000008

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2400000c 	.word	0x2400000c
 80011a8:	24000edc 	.word	0x24000edc

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	24000edc 	.word	0x24000edc

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2400000c 	.word	0x2400000c

0800120c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetREVID+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0c1b      	lsrs	r3, r3, #16
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	5c001000 	.word	0x5c001000

08001224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3360      	adds	r3, #96	; 0x60
 800129e:	461a      	mov	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	611a      	str	r2, [r3, #16]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	431a      	orrs	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	601a      	str	r2, [r3, #0]
  }
}
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135a:	b480      	push	{r7}
 800135c:	b087      	sub	sp, #28
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3330      	adds	r3, #48	; 0x30
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	211f      	movs	r1, #31
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0e9b      	lsrs	r3, r3, #26
 8001392:	f003 011f 	and.w	r1, r3, #31
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f023 0203 	bic.w	r2, r3, #3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60da      	str	r2, [r3, #12]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3314      	adds	r3, #20
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0e5b      	lsrs	r3, r3, #25
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0d1b      	lsrs	r3, r3, #20
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	2107      	movs	r1, #7
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	401a      	ands	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	0d1b      	lsrs	r3, r3, #20
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0318 	and.w	r3, r3, #24
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001454:	40d9      	lsrs	r1, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	400b      	ands	r3, r1
 800145a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800145e:	431a      	orrs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	000fffff 	.word	0x000fffff

08001478 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6093      	str	r3, [r2, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	5fffffc0 	.word	0x5fffffc0

080014b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	6fffffc0 	.word	0x6fffffc0

08001508 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LL_ADC_Enable+0x24>)
 800153e:	4013      	ands	r3, r2
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	7fffffc0 	.word	0x7fffffc0

08001558 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <LL_ADC_Disable+0x24>)
 8001566:	4013      	ands	r3, r2
 8001568:	f043 0202 	orr.w	r2, r3, #2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	7fffffc0 	.word	0x7fffffc0

08001580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <LL_ADC_IsEnabled+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_IsEnabled+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsDisableOngoing+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsDisableOngoing+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <LL_ADC_REG_StartConversion+0x24>)
 80015da:	4013      	ands	r3, r2
 80015dc:	f043 0204 	orr.w	r2, r3, #4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	7fffffc0 	.word	0x7fffffc0

080015f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d101      	bne.n	800160c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d101      	bne.n	8001632 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e18f      	b.n	800197a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fab3 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff19 	bl	80014b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff feff 	bl	8001494 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff34 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d114      	bne.n	80016d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff18 	bl	80014e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b0:	4b87      	ldr	r3, [pc, #540]	; (80018d0 <HAL_ADC_Init+0x290>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_ADC_Init+0x294>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	3301      	adds	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c2:	e002      	b.n	80016ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff17 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff77 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001706:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 8129 	bne.w	8001968 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 8125 	bne.w	8001968 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001726:	f043 0202 	orr.w	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff24 	bl	8001580 <LL_ADC_IsEnabled>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d136      	bne.n	80017ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_ADC_Init+0x298>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_ADC_Init+0x112>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a63      	ldr	r2, [pc, #396]	; (80018dc <HAL_ADC_Init+0x29c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10e      	bne.n	8001770 <HAL_ADC_Init+0x130>
 8001752:	4861      	ldr	r0, [pc, #388]	; (80018d8 <HAL_ADC_Init+0x298>)
 8001754:	f7ff ff14 	bl	8001580 <LL_ADC_IsEnabled>
 8001758:	4604      	mov	r4, r0
 800175a:	4860      	ldr	r0, [pc, #384]	; (80018dc <HAL_ADC_Init+0x29c>)
 800175c:	f7ff ff10 	bl	8001580 <LL_ADC_IsEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	4323      	orrs	r3, r4
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e008      	b.n	8001782 <HAL_ADC_Init+0x142>
 8001770:	485b      	ldr	r0, [pc, #364]	; (80018e0 <HAL_ADC_Init+0x2a0>)
 8001772:	f7ff ff05 	bl	8001580 <LL_ADC_IsEnabled>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d012      	beq.n	80017ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a53      	ldr	r2, [pc, #332]	; (80018d8 <HAL_ADC_Init+0x298>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_ADC_Init+0x15a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_ADC_Init+0x29c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x15e>
 800179a:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_ADC_Init+0x2a4>)
 800179c:	e000      	b.n	80017a0 <HAL_ADC_Init+0x160>
 800179e:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_ADC_Init+0x2a8>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff fd3c 	bl	8001224 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80017ac:	f7ff fd2e 	bl	800120c <HAL_GetREVID>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d914      	bls.n	80017e4 <HAL_ADC_Init+0x1a4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d110      	bne.n	80017e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7d5b      	ldrb	r3, [r3, #21]
 80017c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017dc:	f043 030c 	orr.w	r3, r3, #12
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	e00d      	b.n	8001800 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7d5b      	ldrb	r3, [r3, #21]
 80017e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7f1b      	ldrb	r3, [r3, #28]
 80017fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7f1b      	ldrb	r3, [r3, #28]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	3b01      	subs	r3, #1
 800180e:	045b      	lsls	r3, r3, #17
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_ADC_Init+0x2ac>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	69b9      	ldr	r1, [r7, #24]
 8001842:	430b      	orrs	r3, r1
 8001844:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fed2 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001850:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fedf 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 800185c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d15f      	bne.n	8001924 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d15c      	bne.n	8001924 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7d1b      	ldrb	r3, [r3, #20]
 800186e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_ADC_Init+0x2b0>)
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	430b      	orrs	r3, r1
 800188a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001892:	2b01      	cmp	r3, #1
 8001894:	d130      	bne.n	80018f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_ADC_Init+0x2b4>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018aa:	3a01      	subs	r2, #1
 80018ac:	0411      	lsls	r1, r2, #16
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018be:	430a      	orrs	r2, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	e01c      	b.n	8001908 <HAL_ADC_Init+0x2c8>
 80018ce:	bf00      	nop
 80018d0:	24000000 	.word	0x24000000
 80018d4:	053e2d63 	.word	0x053e2d63
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40022100 	.word	0x40022100
 80018e0:	58026000 	.word	0x58026000
 80018e4:	40022300 	.word	0x40022300
 80018e8:	58026300 	.word	0x58026300
 80018ec:	fff0c003 	.word	0xfff0c003
 80018f0:	ffffbffc 	.word	0xffffbffc
 80018f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fde0 	bl	80024e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10c      	bne.n	8001946 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f023 010f 	bic.w	r1, r3, #15
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
 8001944:	e007      	b.n	8001956 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020f 	bic.w	r2, r2, #15
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
 8001966:	e007      	b.n	8001978 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196c:	f043 0210 	orr.w	r2, r3, #16
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001978:	7ffb      	ldrb	r3, [r7, #31]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop

08001984 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a55      	ldr	r2, [pc, #340]	; (8001aec <HAL_ADC_Start_DMA+0x168>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_Start_DMA+0x20>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <HAL_ADC_Start_DMA+0x16c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x24>
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_ADC_Start_DMA+0x170>)
 80019a6:	e000      	b.n	80019aa <HAL_ADC_Start_DMA+0x26>
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_ADC_Start_DMA+0x174>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fd64 	bl	8001478 <LL_ADC_GetMultimode>
 80019b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe1c 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 808c 	bne.w	8001adc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Start_DMA+0x4e>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e087      	b.n	8001ae2 <HAL_ADC_Start_DMA+0x15e>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d002      	beq.n	80019ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	d170      	bne.n	8001ace <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fbfb 	bl	80021e8 <ADC_Enable>
 80019f2:	4603      	mov	r3, r0
 80019f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d163      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <HAL_ADC_Start_DMA+0x178>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <HAL_ADC_Start_DMA+0x16c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d002      	beq.n	8001a1c <HAL_ADC_Start_DMA+0x98>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_Start_DMA+0x9a>
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_ADC_Start_DMA+0x168>)
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f023 0206 	bic.w	r2, r3, #6
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_ADC_Start_DMA+0x17c>)
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_ADC_Start_DMA+0x180>)
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_ADC_Start_DMA+0x184>)
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	221c      	movs	r2, #28
 8001a76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0210 	orr.w	r2, r2, #16
 8001a8e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7ff fc89 	bl	80013b2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3340      	adds	r3, #64	; 0x40
 8001aaa:	4619      	mov	r1, r3
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f001 fc2a 	bl	8003308 <HAL_DMA_Start_IT>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fd85 	bl	80015cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ac2:	e00d      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001acc:	e008      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ada:	e001      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
 8001ade:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40022100 	.word	0x40022100
 8001af4:	40022300 	.word	0x40022300
 8001af8:	58026300 	.word	0x58026300
 8001afc:	fffff0fe 	.word	0xfffff0fe
 8001b00:	080023bb 	.word	0x080023bb
 8001b04:	08002493 	.word	0x08002493
 8001b08:	080024af 	.word	0x080024af

08001b0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b0a1      	sub	sp, #132	; 0x84
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a9d      	ldr	r2, [pc, #628]	; (8001dd8 <HAL_ADC_ConfigChannel+0x290>)
 8001b62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x2a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e321      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x66e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fd38 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8306 	bne.w	8002198 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x62>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	e016      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x90>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	69d1      	ldr	r1, [r2, #28]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff fbb1 	bl	800135a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fcf9 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001c02:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fd06 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 8001c0e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80b3 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80af 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff fbd3 	bl	80013d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_ADC_ConfigChannel+0x294>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x110>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	e01d      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x14c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x136>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	e00a      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x14c>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d027      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	f7ff faee 	bl	800128c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7e5b      	ldrb	r3, [r3, #25]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x17e>
 8001cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x180>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff fb18 	bl	80012fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7e1b      	ldrb	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x19c>
 8001cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x19e>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7ff faf0 	bl	80012cc <LL_ADC_SetDataRightShift>
 8001cec:	e047      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	069b      	lsls	r3, r3, #26
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d107      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d10:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	069b      	lsls	r3, r3, #26
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d34:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	069b      	lsls	r3, r3, #26
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d58:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d7c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fbfc 	bl	8001580 <LL_ADC_IsEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 820d 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fb47 	bl	8001430 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_ADC_ConfigChannel+0x290>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f040 8133 	bne.w	8002014 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d110      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x298>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	bf94      	ite	ls
 8001dce:	2301      	movls	r3, #1
 8001dd0:	2300      	movhi	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e01e      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x2cc>
 8001dd6:	bf00      	nop
 8001dd8:	47ff0000 	.word	0x47ff0000
 8001ddc:	5c001000 	.word	0x5c001000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	bf94      	ite	ls
 8001e0e:	2301      	movls	r3, #1
 8001e10:	2300      	movhi	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d079      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x2ec>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	069b      	lsls	r3, r3, #26
 8001e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e32:	e015      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x318>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e44:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x338>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	e017      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x368>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x38e>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	051b      	lsls	r3, r3, #20
 8001ed4:	e018      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x3c0>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	e003      	b.n	8001efa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	e07e      	b.n	800200a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x3e0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	3301      	adds	r3, #1
 8001f20:	069b      	lsls	r3, r3, #26
 8001f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f26:	e015      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x40c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x42c>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	3301      	adds	r3, #1
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	e017      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x45c>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	61bb      	str	r3, [r7, #24]
  return result;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x488>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fce:	e01b      	b.n	8002008 <HAL_ADC_ConfigChannel+0x4c0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
  return result;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	051b      	lsls	r3, r3, #20
 8002004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002008:	430b      	orrs	r3, r1
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	4619      	mov	r1, r3
 8002010:	f7ff f9e2 	bl	80013d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f280 80c6 	bge.w	80021aa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x4ea>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x4ee>
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002034:	e000      	b.n	8002038 <HAL_ADC_ConfigChannel+0x4f0>
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f919 	bl	8001270 <LL_ADC_GetCommonPathInternalCh>
 800203e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x50c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10e      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x52a>
 8002054:	485a      	ldr	r0, [pc, #360]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002056:	f7ff fa93 	bl	8001580 <LL_ADC_IsEnabled>
 800205a:	4604      	mov	r4, r0
 800205c:	4859      	ldr	r0, [pc, #356]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800205e:	f7ff fa8f 	bl	8001580 <LL_ADC_IsEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	4323      	orrs	r3, r4
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e008      	b.n	8002084 <HAL_ADC_ConfigChannel+0x53c>
 8002072:	4857      	ldr	r0, [pc, #348]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 8002074:	f7ff fa84 	bl	8001580 <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d07d      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_ADC_ConfigChannel+0x68c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d130      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x5ac>
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12b      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 8081 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x574>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x578>
 80020bc:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 80020be:	e000      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x57a>
 80020c0:	4a42      	ldr	r2, [pc, #264]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff f8bd 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_ADC_ConfigChannel+0x690>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a41      	ldr	r2, [pc, #260]	; (80021dc <HAL_ADC_ConfigChannel+0x694>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f2:	e05a      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a39      	ldr	r2, [pc, #228]	; (80021e0 <HAL_ADC_ConfigChannel+0x698>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11e      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5f4>
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d119      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a30      	ldr	r2, [pc, #192]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d14b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x5de>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x5e2>
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002128:	e000      	b.n	800212c <HAL_ADC_ConfigChannel+0x5e4>
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f7ff f888 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213a:	e036      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_ADC_ConfigChannel+0x69c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d131      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12c      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d127      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_ADC_ConfigChannel+0x626>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x62a>
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x62c>
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff f864 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
 8002182:	e012      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002196:	e008      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3784      	adds	r7, #132	; 0x84
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022100 	.word	0x40022100
 80021c8:	40022300 	.word	0x40022300
 80021cc:	58026300 	.word	0x58026300
 80021d0:	58026000 	.word	0x58026000
 80021d4:	cb840000 	.word	0xcb840000
 80021d8:	24000000 	.word	0x24000000
 80021dc:	053e2d63 	.word	0x053e2d63
 80021e0:	c7520000 	.word	0xc7520000
 80021e4:	cfb80000 	.word	0xcfb80000

080021e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f9c3 	bl	8001580 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d16e      	bne.n	80022de <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <ADC_Enable+0x100>)
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e05a      	b.n	80022e0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f97e 	bl	8001530 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002234:	f7fe ffba 	bl	80011ac <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <ADC_Enable+0x104>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <ADC_Enable+0x66>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <ADC_Enable+0x108>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <ADC_Enable+0x6a>
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <ADC_Enable+0x10c>)
 8002250:	e000      	b.n	8002254 <ADC_Enable+0x6c>
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <ADC_Enable+0x110>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f90f 	bl	8001478 <LL_ADC_GetMultimode>
 800225a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <ADC_Enable+0x108>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d002      	beq.n	800226c <ADC_Enable+0x84>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e000      	b.n	800226e <ADC_Enable+0x86>
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <ADC_Enable+0x104>)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4293      	cmp	r3, r2
 8002274:	d02c      	beq.n	80022d0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d130      	bne.n	80022de <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227c:	e028      	b.n	80022d0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f97c 	bl	8001580 <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f94c 	bl	8001530 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002298:	f7fe ff88 	bl	80011ac <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d914      	bls.n	80022d0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d00d      	beq.n	80022d0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d1cf      	bne.n	800227e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	8000003f 	.word	0x8000003f
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022100 	.word	0x40022100
 80022f4:	40022300 	.word	0x40022300
 80022f8:	58026300 	.word	0x58026300

080022fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f94c 	bl	80015a6 <LL_ADC_IsDisableOngoing>
 800230e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f933 	bl	8001580 <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d047      	beq.n	80023b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d144      	bne.n	80023b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030d 	and.w	r3, r3, #13
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10c      	bne.n	800234e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f90d 	bl	8001558 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2203      	movs	r2, #3
 8002344:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7fe ff31 	bl	80011ac <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800234c:	e029      	b.n	80023a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e023      	b.n	80023b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800236a:	f7fe ff1f 	bl	80011ac <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d914      	bls.n	80023a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e007      	b.n	80023b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1dc      	bne.n	800236a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d14b      	bne.n	800246c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d021      	beq.n	8002432 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe ff9e 	bl	8001334 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d032      	beq.n	8002464 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12b      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11f      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
 8002430:	e018      	b.n	8002464 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fb51 	bl	8001b0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800246a:	e00e      	b.n	800248a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fb5b 	bl	8001b34 <HAL_ADC_ErrorCallback>
}
 800247e:	e004      	b.n	800248a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff fb3d 	bl	8001b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fb2d 	bl	8001b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a79      	ldr	r2, [pc, #484]	; (80026d8 <ADC_ConfigureBoostMode+0x1f4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <ADC_ConfigureBoostMode+0x1c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a78      	ldr	r2, [pc, #480]	; (80026dc <ADC_ConfigureBoostMode+0x1f8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d109      	bne.n	8002514 <ADC_ConfigureBoostMode+0x30>
 8002500:	4b77      	ldr	r3, [pc, #476]	; (80026e0 <ADC_ConfigureBoostMode+0x1fc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e008      	b.n	8002526 <ADC_ConfigureBoostMode+0x42>
 8002514:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <ADC_ConfigureBoostMode+0x200>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01c      	beq.n	8002564 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800252a:	f004 ff3f 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 800252e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002538:	d010      	beq.n	800255c <ADC_ConfigureBoostMode+0x78>
 800253a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800253e:	d871      	bhi.n	8002624 <ADC_ConfigureBoostMode+0x140>
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d002      	beq.n	800254c <ADC_ConfigureBoostMode+0x68>
 8002546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800254a:	d16b      	bne.n	8002624 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	60fb      	str	r3, [r7, #12]
        break;
 800255a:	e066      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	60fb      	str	r3, [r7, #12]
        break;
 8002562:	e062      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002564:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002568:	f005 fe96 	bl	8008298 <HAL_RCCEx_GetPeriphCLKFreq>
 800256c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002576:	d051      	beq.n	800261c <ADC_ConfigureBoostMode+0x138>
 8002578:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800257c:	d854      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 800257e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002582:	d047      	beq.n	8002614 <ADC_ConfigureBoostMode+0x130>
 8002584:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002588:	d84e      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 800258a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800258e:	d03d      	beq.n	800260c <ADC_ConfigureBoostMode+0x128>
 8002590:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002594:	d848      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 8002596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800259a:	d033      	beq.n	8002604 <ADC_ConfigureBoostMode+0x120>
 800259c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a0:	d842      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 80025a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025a6:	d029      	beq.n	80025fc <ADC_ConfigureBoostMode+0x118>
 80025a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025ac:	d83c      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 80025ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025b2:	d01a      	beq.n	80025ea <ADC_ConfigureBoostMode+0x106>
 80025b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025b8:	d836      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 80025ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025be:	d014      	beq.n	80025ea <ADC_ConfigureBoostMode+0x106>
 80025c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025c4:	d830      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 80025c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ca:	d00e      	beq.n	80025ea <ADC_ConfigureBoostMode+0x106>
 80025cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d0:	d82a      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 80025d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025d6:	d008      	beq.n	80025ea <ADC_ConfigureBoostMode+0x106>
 80025d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025dc:	d824      	bhi.n	8002628 <ADC_ConfigureBoostMode+0x144>
 80025de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e2:	d002      	beq.n	80025ea <ADC_ConfigureBoostMode+0x106>
 80025e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025e8:	d11e      	bne.n	8002628 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	60fb      	str	r3, [r7, #12]
        break;
 80025fa:	e016      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
        break;
 8002602:	e012      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	60fb      	str	r3, [r7, #12]
        break;
 800260a:	e00e      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	60fb      	str	r3, [r7, #12]
        break;
 8002612:	e00a      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	09db      	lsrs	r3, r3, #7
 8002618:	60fb      	str	r3, [r7, #12]
        break;
 800261a:	e006      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	60fb      	str	r3, [r7, #12]
        break;
 8002622:	e002      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
        break;
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002628:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800262a:	f7fe fdef 	bl	800120c <HAL_GetREVID>
 800262e:	4603      	mov	r3, r0
 8002630:	f241 0203 	movw	r2, #4099	; 0x1003
 8002634:	4293      	cmp	r3, r2
 8002636:	d815      	bhi.n	8002664 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <ADC_ConfigureBoostMode+0x204>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d908      	bls.n	8002652 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002650:	e03e      	b.n	80026d0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002660:	609a      	str	r2, [r3, #8]
}
 8002662:	e035      	b.n	80026d0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <ADC_ConfigureBoostMode+0x208>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d808      	bhi.n	8002684 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002680:	609a      	str	r2, [r3, #8]
}
 8002682:	e025      	b.n	80026d0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <ADC_ConfigureBoostMode+0x20c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d80a      	bhi.n	80026a2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	e016      	b.n	80026d0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <ADC_ConfigureBoostMode+0x210>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d80a      	bhi.n	80026c0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026bc:	609a      	str	r2, [r3, #8]
}
 80026be:	e007      	b.n	80026d0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40022100 	.word	0x40022100
 80026e0:	40022300 	.word	0x40022300
 80026e4:	58026300 	.word	0x58026300
 80026e8:	01312d00 	.word	0x01312d00
 80026ec:	005f5e10 	.word	0x005f5e10
 80026f0:	00bebc20 	.word	0x00bebc20
 80026f4:	017d7840 	.word	0x017d7840

080026f8 <LL_ADC_IsEnabled>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <LL_ADC_IsEnabled+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_ADC_IsEnabled+0x1a>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <LL_ADC_StartCalibration>:
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <LL_ADC_StartCalibration+0x38>)
 8002732:	4013      	ands	r3, r2
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002740:	430a      	orrs	r2, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	3ffeffc0 	.word	0x3ffeffc0

0800275c <LL_ADC_IsCalibrationOnGoing>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800276c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002770:	d101      	bne.n	8002776 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_REG_IsConversionOngoing>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d101      	bne.n	800279c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADCEx_Calibration_Start+0x1e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e04c      	b.n	8002864 <HAL_ADCEx_Calibration_Start+0xb8>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7ff fd92 	bl	80022fc <ADC_Disable>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d135      	bne.n	800284e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027e6:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_ADCEx_Calibration_Start+0xc0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff90 	bl	8002720 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002800:	e014      	b.n	800282c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3301      	adds	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_ADCEx_Calibration_Start+0xc4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d30d      	bcc.n	800282c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f023 0312 	bic.w	r3, r3, #18
 8002818:	f043 0210 	orr.w	r2, r3, #16
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01b      	b.n	8002864 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff93 	bl	800275c <LL_ADC_IsCalibrationOnGoing>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e2      	bne.n	8002802 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f023 0303 	bic.w	r3, r3, #3
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
 800284c:	e005      	b.n	800285a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	ffffeefd 	.word	0xffffeefd
 8002870:	25c3f800 	.word	0x25c3f800

08002874 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b09f      	sub	sp, #124	; 0x7c
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800288e:	2302      	movs	r3, #2
 8002890:	e0be      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800289e:	2300      	movs	r3, #0
 80028a0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d102      	bne.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e001      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e09d      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff54 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 80028dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff4e 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d17f      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d17c      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002908:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800290a:	e000      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800290e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d039      	beq.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3a      	ldr	r2, [pc, #232]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10e      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800293e:	4836      	ldr	r0, [pc, #216]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002940:	f7ff feda 	bl	80026f8 <LL_ADC_IsEnabled>
 8002944:	4604      	mov	r4, r0
 8002946:	4835      	ldr	r0, [pc, #212]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002948:	f7ff fed6 	bl	80026f8 <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	4323      	orrs	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e008      	b.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800295c:	4832      	ldr	r0, [pc, #200]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800295e:	f7ff fecb 	bl	80026f8 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d047      	beq.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002978:	4013      	ands	r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6811      	ldr	r1, [r2, #0]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	430a      	orrs	r2, r1
 8002984:	431a      	orrs	r2, r3
 8002986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002988:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298a:	e03a      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002996:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10e      	bne.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80029ac:	481a      	ldr	r0, [pc, #104]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029ae:	f7ff fea3 	bl	80026f8 <LL_ADC_IsEnabled>
 80029b2:	4604      	mov	r4, r0
 80029b4:	4819      	ldr	r0, [pc, #100]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029b6:	f7ff fe9f 	bl	80026f8 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4323      	orrs	r3, r4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e008      	b.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80029ca:	4817      	ldr	r0, [pc, #92]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029cc:	f7ff fe94 	bl	80026f8 <LL_ADC_IsEnabled>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ec:	e009      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a00:	e000      	b.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a02:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	377c      	adds	r7, #124	; 0x7c
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40022100 	.word	0x40022100
 8002a20:	40022300 	.word	0x40022300
 8002a24:	58026300 	.word	0x58026300
 8002a28:	58026000 	.word	0x58026000
 8002a2c:	fffff0e0 	.word	0xfffff0e0

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	05fa0000 	.word	0x05fa0000

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff40 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff90 	bl	8002b24 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5f 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff33 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa4 	bl	8002b8c <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7fe faa8 	bl	80011ac <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e316      	b.n	8003296 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a66      	ldr	r2, [pc, #408]	; (8002e08 <HAL_DMA_Init+0x1b8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_DMA_Init+0x1bc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <HAL_DMA_Init+0x1c0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a62      	ldr	r2, [pc, #392]	; (8002e14 <HAL_DMA_Init+0x1c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a60      	ldr	r2, [pc, #384]	; (8002e18 <HAL_DMA_Init+0x1c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <HAL_DMA_Init+0x1cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_DMA_Init+0x1d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5c      	ldr	r2, [pc, #368]	; (8002e24 <HAL_DMA_Init+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5a      	ldr	r2, [pc, #360]	; (8002e28 <HAL_DMA_Init+0x1d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a59      	ldr	r2, [pc, #356]	; (8002e2c <HAL_DMA_Init+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	; (8002e30 <HAL_DMA_Init+0x1e0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_DMA_Init+0x1e4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_DMA_Init+0x1e8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_DMA_Init+0x1ec>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_DMA_Init+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_DMA_Init+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_DMA_Init+0xbc>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_DMA_Init+0xbe>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 813b 	beq.w	8002f8a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <HAL_DMA_Init+0x1b8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <HAL_DMA_Init+0x1bc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_DMA_Init+0x1c0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a33      	ldr	r2, [pc, #204]	; (8002e14 <HAL_DMA_Init+0x1c4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_DMA_Init+0x1c8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <HAL_DMA_Init+0x1cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_DMA_Init+0x1d0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_DMA_Init+0x1d4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_DMA_Init+0x1d8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_DMA_Init+0x1dc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <HAL_DMA_Init+0x1e0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_DMA_Init+0x1e4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <HAL_DMA_Init+0x1e8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <HAL_DMA_Init+0x1ec>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_DMA_Init+0x1f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_DMA_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_Init+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_DMA_Init+0x196>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002de6:	e02f      	b.n	8002e48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de8:	f7fe f9e0 	bl	80011ac <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d928      	bls.n	8002e48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e246      	b.n	8003296 <HAL_DMA_Init+0x646>
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1c8      	bne.n	8002de8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_DMA_Init+0x420>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002eac:	4b71      	ldr	r3, [pc, #452]	; (8003074 <HAL_DMA_Init+0x424>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_DMA_Init+0x428>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb8:	d328      	bcc.n	8002f0c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b28      	cmp	r3, #40	; 0x28
 8002ec0:	d903      	bls.n	8002eca <HAL_DMA_Init+0x27a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec8:	d917      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed0:	d903      	bls.n	8002eda <HAL_DMA_Init+0x28a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b42      	cmp	r3, #66	; 0x42
 8002ed8:	d90f      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b46      	cmp	r3, #70	; 0x46
 8002ee0:	d903      	bls.n	8002eea <HAL_DMA_Init+0x29a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b48      	cmp	r3, #72	; 0x48
 8002ee8:	d907      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b4e      	cmp	r3, #78	; 0x4e
 8002ef0:	d905      	bls.n	8002efe <HAL_DMA_Init+0x2ae>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b52      	cmp	r3, #82	; 0x52
 8002ef8:	d801      	bhi.n	8002efe <HAL_DMA_Init+0x2ae>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_DMA_Init+0x2b0>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d117      	bne.n	8002f66 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 fdcf 	bl	8004aec <DMA_CheckFifoParam>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e197      	b.n	8003296 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 fd0a 	bl	8004988 <DMA_CalcBaseAndBitshift>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	223f      	movs	r2, #63	; 0x3f
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e0cd      	b.n	8003126 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_DMA_Init+0x42c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a39      	ldr	r2, [pc, #228]	; (8003080 <HAL_DMA_Init+0x430>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a38      	ldr	r2, [pc, #224]	; (8003084 <HAL_DMA_Init+0x434>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a36      	ldr	r2, [pc, #216]	; (8003088 <HAL_DMA_Init+0x438>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <HAL_DMA_Init+0x43c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a33      	ldr	r2, [pc, #204]	; (8003090 <HAL_DMA_Init+0x440>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a32      	ldr	r2, [pc, #200]	; (8003094 <HAL_DMA_Init+0x444>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a30      	ldr	r2, [pc, #192]	; (8003098 <HAL_DMA_Init+0x448>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_DMA_Init+0x38e>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_Init+0x390>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8097 	beq.w	8003114 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a24      	ldr	r2, [pc, #144]	; (800307c <HAL_DMA_Init+0x42c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d021      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	; (8003080 <HAL_DMA_Init+0x430>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01c      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	; (8003084 <HAL_DMA_Init+0x434>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d017      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_DMA_Init+0x438>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d012      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_DMA_Init+0x43c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_DMA_Init+0x440>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d008      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_DMA_Init+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a19      	ldr	r2, [pc, #100]	; (8003098 <HAL_DMA_Init+0x448>)
 8003032:	4293      	cmp	r3, r2
 8003034:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_DMA_Init+0x44c>)
 8003052:	4013      	ands	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d020      	beq.n	80030a0 <HAL_DMA_Init+0x450>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d102      	bne.n	800306c <HAL_DMA_Init+0x41c>
 8003066:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800306a:	e01a      	b.n	80030a2 <HAL_DMA_Init+0x452>
 800306c:	2300      	movs	r3, #0
 800306e:	e018      	b.n	80030a2 <HAL_DMA_Init+0x452>
 8003070:	fe10803f 	.word	0xfe10803f
 8003074:	5c001000 	.word	0x5c001000
 8003078:	ffff0000 	.word	0xffff0000
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494
 800309c:	fffe000f 	.word	0xfffe000f
 80030a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <HAL_DMA_Init+0x650>)
 80030e8:	4413      	add	r3, r2
 80030ea:	4a6e      	ldr	r2, [pc, #440]	; (80032a4 <HAL_DMA_Init+0x654>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f001 fc45 	bl	8004988 <DMA_CalcBaseAndBitshift>
 80030fe:	4603      	mov	r3, r0
 8003100:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e008      	b.n	8003126 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0b7      	b.n	8003296 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5f      	ldr	r2, [pc, #380]	; (80032a8 <HAL_DMA_Init+0x658>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d072      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_DMA_Init+0x65c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d06d      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5c      	ldr	r2, [pc, #368]	; (80032b0 <HAL_DMA_Init+0x660>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d068      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <HAL_DMA_Init+0x664>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d063      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <HAL_DMA_Init+0x668>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d05e      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a57      	ldr	r2, [pc, #348]	; (80032bc <HAL_DMA_Init+0x66c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d059      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <HAL_DMA_Init+0x670>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d054      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_DMA_Init+0x674>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04f      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_DMA_Init+0x678>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a51      	ldr	r2, [pc, #324]	; (80032cc <HAL_DMA_Init+0x67c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a50      	ldr	r2, [pc, #320]	; (80032d0 <HAL_DMA_Init+0x680>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4e      	ldr	r2, [pc, #312]	; (80032d4 <HAL_DMA_Init+0x684>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4d      	ldr	r2, [pc, #308]	; (80032d8 <HAL_DMA_Init+0x688>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	; (80032dc <HAL_DMA_Init+0x68c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <HAL_DMA_Init+0x690>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <HAL_DMA_Init+0x694>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_DMA_Init+0x698>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a45      	ldr	r2, [pc, #276]	; (80032ec <HAL_DMA_Init+0x69c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <HAL_DMA_Init+0x6a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <HAL_DMA_Init+0x6a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a41      	ldr	r2, [pc, #260]	; (80032f8 <HAL_DMA_Init+0x6a8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <HAL_DMA_Init+0x6ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <HAL_DMA_Init+0x6b0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3c      	ldr	r2, [pc, #240]	; (8003304 <HAL_DMA_Init+0x6b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_DMA_Init+0x5ca>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_DMA_Init+0x5cc>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d032      	beq.n	8003286 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f001 fcdf 	bl	8004be4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d102      	bne.n	8003234 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003248:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_DMA_Init+0x624>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d80c      	bhi.n	8003274 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 fd5c 	bl	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e008      	b.n	8003286 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	a7fdabf8 	.word	0xa7fdabf8
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
 80032e8:	58025408 	.word	0x58025408
 80032ec:	5802541c 	.word	0x5802541c
 80032f0:	58025430 	.word	0x58025430
 80032f4:	58025444 	.word	0x58025444
 80032f8:	58025458 	.word	0x58025458
 80032fc:	5802546c 	.word	0x5802546c
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494

08003308 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e226      	b.n	8003772 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_DMA_Start_IT+0x2a>
 800332e:	2302      	movs	r3, #2
 8003330:	e21f      	b.n	8003772 <HAL_DMA_Start_IT+0x46a>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	f040 820a 	bne.w	800375c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a68      	ldr	r2, [pc, #416]	; (80034fc <HAL_DMA_Start_IT+0x1f4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d04a      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a66      	ldr	r2, [pc, #408]	; (8003500 <HAL_DMA_Start_IT+0x1f8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d045      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_DMA_Start_IT+0x1fc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d040      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_DMA_Start_IT+0x200>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d03b      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a62      	ldr	r2, [pc, #392]	; (800350c <HAL_DMA_Start_IT+0x204>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d036      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_DMA_Start_IT+0x208>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d031      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5f      	ldr	r2, [pc, #380]	; (8003514 <HAL_DMA_Start_IT+0x20c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d02c      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <HAL_DMA_Start_IT+0x210>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d027      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_DMA_Start_IT+0x214>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <HAL_DMA_Start_IT+0x218>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01d      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a59      	ldr	r2, [pc, #356]	; (8003524 <HAL_DMA_Start_IT+0x21c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_DMA_Start_IT+0x220>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a56      	ldr	r2, [pc, #344]	; (800352c <HAL_DMA_Start_IT+0x224>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_DMA_Start_IT+0x228>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_DMA_Start_IT+0x22c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_DMA_Start_IT+0xee>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a51      	ldr	r2, [pc, #324]	; (8003538 <HAL_DMA_Start_IT+0x230>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d108      	bne.n	8003408 <HAL_DMA_Start_IT+0x100>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e007      	b.n	8003418 <HAL_DMA_Start_IT+0x110>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f001 f906 	bl	8004630 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_DMA_Start_IT+0x1f4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04a      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a33      	ldr	r2, [pc, #204]	; (8003500 <HAL_DMA_Start_IT+0x1f8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d045      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a31      	ldr	r2, [pc, #196]	; (8003504 <HAL_DMA_Start_IT+0x1fc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d040      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a30      	ldr	r2, [pc, #192]	; (8003508 <HAL_DMA_Start_IT+0x200>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d03b      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2e      	ldr	r2, [pc, #184]	; (800350c <HAL_DMA_Start_IT+0x204>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d036      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_DMA_Start_IT+0x208>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d031      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <HAL_DMA_Start_IT+0x20c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02c      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <HAL_DMA_Start_IT+0x210>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d027      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <HAL_DMA_Start_IT+0x214>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d022      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a27      	ldr	r2, [pc, #156]	; (8003520 <HAL_DMA_Start_IT+0x218>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d01d      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <HAL_DMA_Start_IT+0x21c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a24      	ldr	r2, [pc, #144]	; (8003528 <HAL_DMA_Start_IT+0x220>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d013      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_DMA_Start_IT+0x224>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a21      	ldr	r2, [pc, #132]	; (8003530 <HAL_DMA_Start_IT+0x228>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_DMA_Start_IT+0x22c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_DMA_Start_IT+0x1bc>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <HAL_DMA_Start_IT+0x230>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_DMA_Start_IT+0x1c0>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_DMA_Start_IT+0x1c2>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 021e 	bic.w	r2, r3, #30
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0216 	orr.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03e      	beq.n	8003568 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0208 	orr.w	r2, r2, #8
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e035      	b.n	8003568 <HAL_DMA_Start_IT+0x260>
 80034fc:	40020010 	.word	0x40020010
 8003500:	40020028 	.word	0x40020028
 8003504:	40020040 	.word	0x40020040
 8003508:	40020058 	.word	0x40020058
 800350c:	40020070 	.word	0x40020070
 8003510:	40020088 	.word	0x40020088
 8003514:	400200a0 	.word	0x400200a0
 8003518:	400200b8 	.word	0x400200b8
 800351c:	40020410 	.word	0x40020410
 8003520:	40020428 	.word	0x40020428
 8003524:	40020440 	.word	0x40020440
 8003528:	40020458 	.word	0x40020458
 800352c:	40020470 	.word	0x40020470
 8003530:	40020488 	.word	0x40020488
 8003534:	400204a0 	.word	0x400204a0
 8003538:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 020e 	bic.w	r2, r3, #14
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 020a 	orr.w	r2, r2, #10
 800354e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0204 	orr.w	r2, r2, #4
 8003566:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a83      	ldr	r2, [pc, #524]	; (800377c <HAL_DMA_Start_IT+0x474>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d072      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a82      	ldr	r2, [pc, #520]	; (8003780 <HAL_DMA_Start_IT+0x478>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d06d      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a80      	ldr	r2, [pc, #512]	; (8003784 <HAL_DMA_Start_IT+0x47c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d068      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <HAL_DMA_Start_IT+0x480>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d063      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7d      	ldr	r2, [pc, #500]	; (800378c <HAL_DMA_Start_IT+0x484>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d05e      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7c      	ldr	r2, [pc, #496]	; (8003790 <HAL_DMA_Start_IT+0x488>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d059      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_DMA_Start_IT+0x48c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d054      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a79      	ldr	r2, [pc, #484]	; (8003798 <HAL_DMA_Start_IT+0x490>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04f      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a77      	ldr	r2, [pc, #476]	; (800379c <HAL_DMA_Start_IT+0x494>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04a      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a76      	ldr	r2, [pc, #472]	; (80037a0 <HAL_DMA_Start_IT+0x498>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d045      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a74      	ldr	r2, [pc, #464]	; (80037a4 <HAL_DMA_Start_IT+0x49c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d040      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a73      	ldr	r2, [pc, #460]	; (80037a8 <HAL_DMA_Start_IT+0x4a0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d03b      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a71      	ldr	r2, [pc, #452]	; (80037ac <HAL_DMA_Start_IT+0x4a4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d036      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a70      	ldr	r2, [pc, #448]	; (80037b0 <HAL_DMA_Start_IT+0x4a8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	; (80037b4 <HAL_DMA_Start_IT+0x4ac>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6d      	ldr	r2, [pc, #436]	; (80037b8 <HAL_DMA_Start_IT+0x4b0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d027      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6b      	ldr	r2, [pc, #428]	; (80037bc <HAL_DMA_Start_IT+0x4b4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <HAL_DMA_Start_IT+0x4b8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01d      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a68      	ldr	r2, [pc, #416]	; (80037c4 <HAL_DMA_Start_IT+0x4bc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a67      	ldr	r2, [pc, #412]	; (80037c8 <HAL_DMA_Start_IT+0x4c0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_DMA_Start_IT+0x4c4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a64      	ldr	r2, [pc, #400]	; (80037d0 <HAL_DMA_Start_IT+0x4c8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a62      	ldr	r2, [pc, #392]	; (80037d4 <HAL_DMA_Start_IT+0x4cc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_DMA_Start_IT+0x350>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a61      	ldr	r2, [pc, #388]	; (80037d8 <HAL_DMA_Start_IT+0x4d0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_DMA_Start_IT+0x354>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_DMA_Start_IT+0x356>
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01a      	beq.n	8003698 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003696:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a37      	ldr	r2, [pc, #220]	; (800377c <HAL_DMA_Start_IT+0x474>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a36      	ldr	r2, [pc, #216]	; (8003780 <HAL_DMA_Start_IT+0x478>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	; (8003784 <HAL_DMA_Start_IT+0x47c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a33      	ldr	r2, [pc, #204]	; (8003788 <HAL_DMA_Start_IT+0x480>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	; (800378c <HAL_DMA_Start_IT+0x484>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a30      	ldr	r2, [pc, #192]	; (8003790 <HAL_DMA_Start_IT+0x488>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <HAL_DMA_Start_IT+0x48c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_DMA_Start_IT+0x490>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	; (800379c <HAL_DMA_Start_IT+0x494>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <HAL_DMA_Start_IT+0x498>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_DMA_Start_IT+0x49c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <HAL_DMA_Start_IT+0x4a0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a25      	ldr	r2, [pc, #148]	; (80037ac <HAL_DMA_Start_IT+0x4a4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <HAL_DMA_Start_IT+0x4a8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <HAL_DMA_Start_IT+0x4ac>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Start_IT+0x430>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_DMA_Start_IT+0x4b0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <HAL_DMA_Start_IT+0x442>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e012      	b.n	8003770 <HAL_DMA_Start_IT+0x468>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e009      	b.n	8003770 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003762:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003770:	7dfb      	ldrb	r3, [r7, #23]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40020010 	.word	0x40020010
 8003780:	40020028 	.word	0x40020028
 8003784:	40020040 	.word	0x40020040
 8003788:	40020058 	.word	0x40020058
 800378c:	40020070 	.word	0x40020070
 8003790:	40020088 	.word	0x40020088
 8003794:	400200a0 	.word	0x400200a0
 8003798:	400200b8 	.word	0x400200b8
 800379c:	40020410 	.word	0x40020410
 80037a0:	40020428 	.word	0x40020428
 80037a4:	40020440 	.word	0x40020440
 80037a8:	40020458 	.word	0x40020458
 80037ac:	40020470 	.word	0x40020470
 80037b0:	40020488 	.word	0x40020488
 80037b4:	400204a0 	.word	0x400204a0
 80037b8:	400204b8 	.word	0x400204b8
 80037bc:	58025408 	.word	0x58025408
 80037c0:	5802541c 	.word	0x5802541c
 80037c4:	58025430 	.word	0x58025430
 80037c8:	58025444 	.word	0x58025444
 80037cc:	58025458 	.word	0x58025458
 80037d0:	5802546c 	.word	0x5802546c
 80037d4:	58025480 	.word	0x58025480
 80037d8:	58025494 	.word	0x58025494

080037dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e8:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_DMA_IRQHandler+0x1ac>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a67      	ldr	r2, [pc, #412]	; (800398c <HAL_DMA_IRQHandler+0x1b0>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a5f      	ldr	r2, [pc, #380]	; (8003990 <HAL_DMA_IRQHandler+0x1b4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d04a      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_DMA_IRQHandler+0x1b8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d045      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a5c      	ldr	r2, [pc, #368]	; (8003998 <HAL_DMA_IRQHandler+0x1bc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d040      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a5a      	ldr	r2, [pc, #360]	; (800399c <HAL_DMA_IRQHandler+0x1c0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d03b      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a59      	ldr	r2, [pc, #356]	; (80039a0 <HAL_DMA_IRQHandler+0x1c4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d036      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_DMA_IRQHandler+0x1c8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_DMA_IRQHandler+0x1cc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d02c      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a54      	ldr	r2, [pc, #336]	; (80039ac <HAL_DMA_IRQHandler+0x1d0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d027      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a53      	ldr	r2, [pc, #332]	; (80039b0 <HAL_DMA_IRQHandler+0x1d4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a51      	ldr	r2, [pc, #324]	; (80039b4 <HAL_DMA_IRQHandler+0x1d8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a50      	ldr	r2, [pc, #320]	; (80039b8 <HAL_DMA_IRQHandler+0x1dc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <HAL_DMA_IRQHandler+0x1e0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a4d      	ldr	r2, [pc, #308]	; (80039c0 <HAL_DMA_IRQHandler+0x1e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_DMA_IRQHandler+0x1e8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <HAL_DMA_IRQHandler+0x1ec>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_IRQHandler+0xd2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a48      	ldr	r2, [pc, #288]	; (80039cc <HAL_DMA_IRQHandler+0x1f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_IRQHandler+0xd6>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 842b 	beq.w	8004110 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2208      	movs	r2, #8
 80038c4:	409a      	lsls	r2, r3
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80a2 	beq.w	8003a14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2e      	ldr	r2, [pc, #184]	; (8003990 <HAL_DMA_IRQHandler+0x1b4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d04a      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2d      	ldr	r2, [pc, #180]	; (8003994 <HAL_DMA_IRQHandler+0x1b8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d045      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <HAL_DMA_IRQHandler+0x1bc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d040      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2a      	ldr	r2, [pc, #168]	; (800399c <HAL_DMA_IRQHandler+0x1c0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d03b      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <HAL_DMA_IRQHandler+0x1c4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d036      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <HAL_DMA_IRQHandler+0x1c8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d031      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <HAL_DMA_IRQHandler+0x1cc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02c      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_DMA_IRQHandler+0x1d0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d027      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <HAL_DMA_IRQHandler+0x1d4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <HAL_DMA_IRQHandler+0x1d8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_DMA_IRQHandler+0x1dc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_DMA_IRQHandler+0x1e0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <HAL_DMA_IRQHandler+0x1e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_DMA_IRQHandler+0x1e8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_DMA_IRQHandler+0x1ec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x194>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_DMA_IRQHandler+0x1f0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d12f      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x1f4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e02e      	b.n	80039e4 <HAL_DMA_IRQHandler+0x208>
 8003986:	bf00      	nop
 8003988:	24000000 	.word	0x24000000
 800398c:	1b4e81b5 	.word	0x1b4e81b5
 8003990:	40020010 	.word	0x40020010
 8003994:	40020028 	.word	0x40020028
 8003998:	40020040 	.word	0x40020040
 800399c:	40020058 	.word	0x40020058
 80039a0:	40020070 	.word	0x40020070
 80039a4:	40020088 	.word	0x40020088
 80039a8:	400200a0 	.word	0x400200a0
 80039ac:	400200b8 	.word	0x400200b8
 80039b0:	40020410 	.word	0x40020410
 80039b4:	40020428 	.word	0x40020428
 80039b8:	40020440 	.word	0x40020440
 80039bc:	40020458 	.word	0x40020458
 80039c0:	40020470 	.word	0x40020470
 80039c4:	40020488 	.word	0x40020488
 80039c8:	400204a0 	.word	0x400204a0
 80039cc:	400204b8 	.word	0x400204b8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0204 	bic.w	r2, r2, #4
 80039f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2208      	movs	r2, #8
 8003a02:	409a      	lsls	r2, r3
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06e      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a69      	ldr	r2, [pc, #420]	; (8003bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d04a      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a67      	ldr	r2, [pc, #412]	; (8003bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d045      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a66      	ldr	r2, [pc, #408]	; (8003bdc <HAL_DMA_IRQHandler+0x400>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d040      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a64      	ldr	r2, [pc, #400]	; (8003be0 <HAL_DMA_IRQHandler+0x404>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d03b      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a63      	ldr	r2, [pc, #396]	; (8003be4 <HAL_DMA_IRQHandler+0x408>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d036      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a61      	ldr	r2, [pc, #388]	; (8003be8 <HAL_DMA_IRQHandler+0x40c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d031      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_DMA_IRQHandler+0x410>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d02c      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5e      	ldr	r2, [pc, #376]	; (8003bf0 <HAL_DMA_IRQHandler+0x414>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d027      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_DMA_IRQHandler+0x418>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d022      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_DMA_IRQHandler+0x41c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01d      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5a      	ldr	r2, [pc, #360]	; (8003bfc <HAL_DMA_IRQHandler+0x420>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <HAL_DMA_IRQHandler+0x424>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_DMA_IRQHandler+0x428>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00e      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a55      	ldr	r2, [pc, #340]	; (8003c08 <HAL_DMA_IRQHandler+0x42c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a54      	ldr	r2, [pc, #336]	; (8003c0c <HAL_DMA_IRQHandler+0x430>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d004      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2ee>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_DMA_IRQHandler+0x434>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x304>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e003      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2201      	movs	r2, #1
 8003af6:	409a      	lsls	r2, r3
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2204      	movs	r2, #4
 8003b12:	409a      	lsls	r2, r3
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 808f 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04a      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d045      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_DMA_IRQHandler+0x400>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d040      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <HAL_DMA_IRQHandler+0x404>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d03b      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a26      	ldr	r2, [pc, #152]	; (8003be4 <HAL_DMA_IRQHandler+0x408>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d036      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <HAL_DMA_IRQHandler+0x40c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d031      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a23      	ldr	r2, [pc, #140]	; (8003bec <HAL_DMA_IRQHandler+0x410>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d02c      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_DMA_IRQHandler+0x414>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d027      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <HAL_DMA_IRQHandler+0x418>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_DMA_IRQHandler+0x41c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_DMA_IRQHandler+0x420>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_DMA_IRQHandler+0x424>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <HAL_DMA_IRQHandler+0x428>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_DMA_IRQHandler+0x42c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_DMA_IRQHandler+0x430>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x3e2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <HAL_DMA_IRQHandler+0x434>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d12a      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x438>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e023      	b.n	8003c1c <HAL_DMA_IRQHandler+0x440>
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020040 	.word	0x40020040
 8003be0:	40020058 	.word	0x40020058
 8003be4:	40020070 	.word	0x40020070
 8003be8:	40020088 	.word	0x40020088
 8003bec:	400200a0 	.word	0x400200a0
 8003bf0:	400200b8 	.word	0x400200b8
 8003bf4:	40020410 	.word	0x40020410
 8003bf8:	40020428 	.word	0x40020428
 8003bfc:	40020440 	.word	0x40020440
 8003c00:	40020458 	.word	0x40020458
 8003c04:	40020470 	.word	0x40020470
 8003c08:	40020488 	.word	0x40020488
 8003c0c:	400204a0 	.word	0x400204a0
 8003c10:	400204b8 	.word	0x400204b8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2204      	movs	r2, #4
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2210      	movs	r2, #16
 8003c46:	409a      	lsls	r2, r3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a6 	beq.w	8003d9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a85      	ldr	r2, [pc, #532]	; (8003e6c <HAL_DMA_IRQHandler+0x690>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d04a      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a83      	ldr	r2, [pc, #524]	; (8003e70 <HAL_DMA_IRQHandler+0x694>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d045      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a82      	ldr	r2, [pc, #520]	; (8003e74 <HAL_DMA_IRQHandler+0x698>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d040      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_DMA_IRQHandler+0x69c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03b      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7f      	ldr	r2, [pc, #508]	; (8003e7c <HAL_DMA_IRQHandler+0x6a0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d036      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7d      	ldr	r2, [pc, #500]	; (8003e80 <HAL_DMA_IRQHandler+0x6a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a7c      	ldr	r2, [pc, #496]	; (8003e84 <HAL_DMA_IRQHandler+0x6a8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d02c      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7a      	ldr	r2, [pc, #488]	; (8003e88 <HAL_DMA_IRQHandler+0x6ac>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a79      	ldr	r2, [pc, #484]	; (8003e8c <HAL_DMA_IRQHandler+0x6b0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a77      	ldr	r2, [pc, #476]	; (8003e90 <HAL_DMA_IRQHandler+0x6b4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a76      	ldr	r2, [pc, #472]	; (8003e94 <HAL_DMA_IRQHandler+0x6b8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a74      	ldr	r2, [pc, #464]	; (8003e98 <HAL_DMA_IRQHandler+0x6bc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a73      	ldr	r2, [pc, #460]	; (8003e9c <HAL_DMA_IRQHandler+0x6c0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a71      	ldr	r2, [pc, #452]	; (8003ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a70      	ldr	r2, [pc, #448]	; (8003ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x516>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10a      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x52c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e009      	b.n	8003d1c <HAL_DMA_IRQHandler+0x540>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d03e      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2210      	movs	r2, #16
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d024      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e01f      	b.n	8003d9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
 8003d6e:	e016      	b.n	8003d9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d107      	bne.n	8003d8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0208 	bic.w	r2, r2, #8
 8003d8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2220      	movs	r2, #32
 8003da8:	409a      	lsls	r2, r3
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8110 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <HAL_DMA_IRQHandler+0x690>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d04a      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <HAL_DMA_IRQHandler+0x694>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d045      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <HAL_DMA_IRQHandler+0x698>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d040      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <HAL_DMA_IRQHandler+0x69c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d03b      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_DMA_IRQHandler+0x6a0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d036      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <HAL_DMA_IRQHandler+0x6a4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d031      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_DMA_IRQHandler+0x6a8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02c      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_DMA_IRQHandler+0x6ac>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d027      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <HAL_DMA_IRQHandler+0x6b0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_DMA_IRQHandler+0x6b4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_DMA_IRQHandler+0x6b8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_DMA_IRQHandler+0x6bc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_DMA_IRQHandler+0x6c0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x678>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d12b      	bne.n	8003eac <HAL_DMA_IRQHandler+0x6d0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	e02a      	b.n	8003ec0 <HAL_DMA_IRQHandler+0x6e4>
 8003e6a:	bf00      	nop
 8003e6c:	40020010 	.word	0x40020010
 8003e70:	40020028 	.word	0x40020028
 8003e74:	40020040 	.word	0x40020040
 8003e78:	40020058 	.word	0x40020058
 8003e7c:	40020070 	.word	0x40020070
 8003e80:	40020088 	.word	0x40020088
 8003e84:	400200a0 	.word	0x400200a0
 8003e88:	400200b8 	.word	0x400200b8
 8003e8c:	40020410 	.word	0x40020410
 8003e90:	40020428 	.word	0x40020428
 8003e94:	40020440 	.word	0x40020440
 8003e98:	40020458 	.word	0x40020458
 8003e9c:	40020470 	.word	0x40020470
 8003ea0:	40020488 	.word	0x40020488
 8003ea4:	400204a0 	.word	0x400204a0
 8003ea8:	400204b8 	.word	0x400204b8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8087 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2220      	movs	r2, #32
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d139      	bne.n	8003f56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0216 	bic.w	r2, r2, #22
 8003ef0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_DMA_IRQHandler+0x736>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0208 	bic.w	r2, r2, #8
 8003f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	223f      	movs	r2, #63	; 0x3f
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 834a 	beq.w	80045e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
          }
          return;
 8003f54:	e344      	b.n	80045e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02c      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e027      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d023      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e01e      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0210 	bic.w	r2, r2, #16
 8003fb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8306 	beq.w	80045ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8088 	beq.w	80040fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7a      	ldr	r2, [pc, #488]	; (80041e4 <HAL_DMA_IRQHandler+0xa08>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04a      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a79      	ldr	r2, [pc, #484]	; (80041e8 <HAL_DMA_IRQHandler+0xa0c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d045      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a77      	ldr	r2, [pc, #476]	; (80041ec <HAL_DMA_IRQHandler+0xa10>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d040      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a76      	ldr	r2, [pc, #472]	; (80041f0 <HAL_DMA_IRQHandler+0xa14>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d03b      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a74      	ldr	r2, [pc, #464]	; (80041f4 <HAL_DMA_IRQHandler+0xa18>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d036      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a73      	ldr	r2, [pc, #460]	; (80041f8 <HAL_DMA_IRQHandler+0xa1c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d031      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a71      	ldr	r2, [pc, #452]	; (80041fc <HAL_DMA_IRQHandler+0xa20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d02c      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a70      	ldr	r2, [pc, #448]	; (8004200 <HAL_DMA_IRQHandler+0xa24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d027      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6e      	ldr	r2, [pc, #440]	; (8004204 <HAL_DMA_IRQHandler+0xa28>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6d      	ldr	r2, [pc, #436]	; (8004208 <HAL_DMA_IRQHandler+0xa2c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6b      	ldr	r2, [pc, #428]	; (800420c <HAL_DMA_IRQHandler+0xa30>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6a      	ldr	r2, [pc, #424]	; (8004210 <HAL_DMA_IRQHandler+0xa34>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a68      	ldr	r2, [pc, #416]	; (8004214 <HAL_DMA_IRQHandler+0xa38>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a67      	ldr	r2, [pc, #412]	; (8004218 <HAL_DMA_IRQHandler+0xa3c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a65      	ldr	r2, [pc, #404]	; (800421c <HAL_DMA_IRQHandler+0xa40>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_DMA_IRQHandler+0x8b8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a64      	ldr	r2, [pc, #400]	; (8004220 <HAL_DMA_IRQHandler+0xa44>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x8ca>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e007      	b.n	80040b6 <HAL_DMA_IRQHandler+0x8da>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3301      	adds	r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	429a      	cmp	r2, r3
 80040c0:	d307      	bcc.n	80040d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f2      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x8da>
 80040d0:	e000      	b.n	80040d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2203      	movs	r2, #3
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040ea:	e003      	b.n	80040f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8272 	beq.w	80045ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
 800410e:	e26c      	b.n	80045ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a43      	ldr	r2, [pc, #268]	; (8004224 <HAL_DMA_IRQHandler+0xa48>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a42      	ldr	r2, [pc, #264]	; (8004228 <HAL_DMA_IRQHandler+0xa4c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01d      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a40      	ldr	r2, [pc, #256]	; (800422c <HAL_DMA_IRQHandler+0xa50>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3f      	ldr	r2, [pc, #252]	; (8004230 <HAL_DMA_IRQHandler+0xa54>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3d      	ldr	r2, [pc, #244]	; (8004234 <HAL_DMA_IRQHandler+0xa58>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3c      	ldr	r2, [pc, #240]	; (8004238 <HAL_DMA_IRQHandler+0xa5c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a3a      	ldr	r2, [pc, #232]	; (800423c <HAL_DMA_IRQHandler+0xa60>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_DMA_IRQHandler+0x984>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_DMA_IRQHandler+0xa64>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_DMA_IRQHandler+0x988>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_DMA_IRQHandler+0x98a>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 823f 	beq.w	80045ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	2204      	movs	r2, #4
 800417e:	409a      	lsls	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80cd 	beq.w	8004324 <HAL_DMA_IRQHandler+0xb48>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80c7 	beq.w	8004324 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2204      	movs	r2, #4
 80041a0:	409a      	lsls	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d049      	beq.n	8004244 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8210 	beq.w	80045e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041cc:	e20a      	b.n	80045e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8206 	beq.w	80045e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041e0:	e200      	b.n	80045e4 <HAL_DMA_IRQHandler+0xe08>
 80041e2:	bf00      	nop
 80041e4:	40020010 	.word	0x40020010
 80041e8:	40020028 	.word	0x40020028
 80041ec:	40020040 	.word	0x40020040
 80041f0:	40020058 	.word	0x40020058
 80041f4:	40020070 	.word	0x40020070
 80041f8:	40020088 	.word	0x40020088
 80041fc:	400200a0 	.word	0x400200a0
 8004200:	400200b8 	.word	0x400200b8
 8004204:	40020410 	.word	0x40020410
 8004208:	40020428 	.word	0x40020428
 800420c:	40020440 	.word	0x40020440
 8004210:	40020458 	.word	0x40020458
 8004214:	40020470 	.word	0x40020470
 8004218:	40020488 	.word	0x40020488
 800421c:	400204a0 	.word	0x400204a0
 8004220:	400204b8 	.word	0x400204b8
 8004224:	58025408 	.word	0x58025408
 8004228:	5802541c 	.word	0x5802541c
 800422c:	58025430 	.word	0x58025430
 8004230:	58025444 	.word	0x58025444
 8004234:	58025458 	.word	0x58025458
 8004238:	5802546c 	.word	0x5802546c
 800423c:	58025480 	.word	0x58025480
 8004240:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d160      	bne.n	8004310 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7f      	ldr	r2, [pc, #508]	; (8004450 <HAL_DMA_IRQHandler+0xc74>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a7d      	ldr	r2, [pc, #500]	; (8004454 <HAL_DMA_IRQHandler+0xc78>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7c      	ldr	r2, [pc, #496]	; (8004458 <HAL_DMA_IRQHandler+0xc7c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7a      	ldr	r2, [pc, #488]	; (800445c <HAL_DMA_IRQHandler+0xc80>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a79      	ldr	r2, [pc, #484]	; (8004460 <HAL_DMA_IRQHandler+0xc84>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a77      	ldr	r2, [pc, #476]	; (8004464 <HAL_DMA_IRQHandler+0xc88>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a76      	ldr	r2, [pc, #472]	; (8004468 <HAL_DMA_IRQHandler+0xc8c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a74      	ldr	r2, [pc, #464]	; (800446c <HAL_DMA_IRQHandler+0xc90>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a73      	ldr	r2, [pc, #460]	; (8004470 <HAL_DMA_IRQHandler+0xc94>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a71      	ldr	r2, [pc, #452]	; (8004474 <HAL_DMA_IRQHandler+0xc98>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a70      	ldr	r2, [pc, #448]	; (8004478 <HAL_DMA_IRQHandler+0xc9c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6e      	ldr	r2, [pc, #440]	; (800447c <HAL_DMA_IRQHandler+0xca0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6d      	ldr	r2, [pc, #436]	; (8004480 <HAL_DMA_IRQHandler+0xca4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6b      	ldr	r2, [pc, #428]	; (8004484 <HAL_DMA_IRQHandler+0xca8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <HAL_DMA_IRQHandler+0xcac>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_IRQHandler+0xb12>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a68      	ldr	r2, [pc, #416]	; (800448c <HAL_DMA_IRQHandler+0xcb0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d108      	bne.n	8004300 <HAL_DMA_IRQHandler+0xb24>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e007      	b.n	8004310 <HAL_DMA_IRQHandler+0xb34>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0204 	bic.w	r2, r2, #4
 800430e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8165 	beq.w	80045e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004322:	e15f      	b.n	80045e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2202      	movs	r2, #2
 800432e:	409a      	lsls	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80c5 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xce8>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80bf 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2202      	movs	r2, #2
 8004350:	409a      	lsls	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d018      	beq.n	8004392 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 813a 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437c:	e134      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8130 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004390:	e12a      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 8089 	bne.w	80044b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <HAL_DMA_IRQHandler+0xc74>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04a      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a29      	ldr	r2, [pc, #164]	; (8004454 <HAL_DMA_IRQHandler+0xc78>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d045      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a28      	ldr	r2, [pc, #160]	; (8004458 <HAL_DMA_IRQHandler+0xc7c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <HAL_DMA_IRQHandler+0xc80>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03b      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_DMA_IRQHandler+0xc84>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d036      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_DMA_IRQHandler+0xc88>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <HAL_DMA_IRQHandler+0xc8c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02c      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a20      	ldr	r2, [pc, #128]	; (800446c <HAL_DMA_IRQHandler+0xc90>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d027      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <HAL_DMA_IRQHandler+0xc94>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_DMA_IRQHandler+0xc98>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_DMA_IRQHandler+0xc9c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1a      	ldr	r2, [pc, #104]	; (800447c <HAL_DMA_IRQHandler+0xca0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_DMA_IRQHandler+0xca4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_DMA_IRQHandler+0xca8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_DMA_IRQHandler+0xcac>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_DMA_IRQHandler+0xc62>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <HAL_DMA_IRQHandler+0xcb0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d128      	bne.n	8004490 <HAL_DMA_IRQHandler+0xcb4>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0214 	bic.w	r2, r2, #20
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e027      	b.n	80044a0 <HAL_DMA_IRQHandler+0xcc4>
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 020a 	bic.w	r2, r2, #10
 800449e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8097 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c2:	e091      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2208      	movs	r2, #8
 80044ce:	409a      	lsls	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8088 	beq.w	80045ea <HAL_DMA_IRQHandler+0xe0e>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8082 	beq.w	80045ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a41      	ldr	r2, [pc, #260]	; (80045f0 <HAL_DMA_IRQHandler+0xe14>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d04a      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <HAL_DMA_IRQHandler+0xe18>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d045      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3e      	ldr	r2, [pc, #248]	; (80045f8 <HAL_DMA_IRQHandler+0xe1c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d040      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <HAL_DMA_IRQHandler+0xe20>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d03b      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <HAL_DMA_IRQHandler+0xe24>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d036      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a39      	ldr	r2, [pc, #228]	; (8004604 <HAL_DMA_IRQHandler+0xe28>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d031      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a38      	ldr	r2, [pc, #224]	; (8004608 <HAL_DMA_IRQHandler+0xe2c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d02c      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a36      	ldr	r2, [pc, #216]	; (800460c <HAL_DMA_IRQHandler+0xe30>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d027      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a35      	ldr	r2, [pc, #212]	; (8004610 <HAL_DMA_IRQHandler+0xe34>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d022      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a33      	ldr	r2, [pc, #204]	; (8004614 <HAL_DMA_IRQHandler+0xe38>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01d      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a32      	ldr	r2, [pc, #200]	; (8004618 <HAL_DMA_IRQHandler+0xe3c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a30      	ldr	r2, [pc, #192]	; (800461c <HAL_DMA_IRQHandler+0xe40>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <HAL_DMA_IRQHandler+0xe44>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a2d      	ldr	r2, [pc, #180]	; (8004624 <HAL_DMA_IRQHandler+0xe48>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <HAL_DMA_IRQHandler+0xe4c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_DMA_IRQHandler+0xdaa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <HAL_DMA_IRQHandler+0xe50>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <HAL_DMA_IRQHandler+0xdbc>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 021c 	bic.w	r2, r2, #28
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e007      	b.n	80045a8 <HAL_DMA_IRQHandler+0xdcc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020e 	bic.w	r2, r2, #14
 80045a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2201      	movs	r2, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
 80045de:	e004      	b.n	80045ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045e0:	bf00      	nop
 80045e2:	e002      	b.n	80045ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045ea:	3728      	adds	r7, #40	; 0x28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8

08004630 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7f      	ldr	r2, [pc, #508]	; (800484c <DMA_SetConfig+0x21c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d072      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7d      	ldr	r2, [pc, #500]	; (8004850 <DMA_SetConfig+0x220>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d06d      	beq.n	800473a <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <DMA_SetConfig+0x224>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d068      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a7a      	ldr	r2, [pc, #488]	; (8004858 <DMA_SetConfig+0x228>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d063      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a79      	ldr	r2, [pc, #484]	; (800485c <DMA_SetConfig+0x22c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d05e      	beq.n	800473a <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a77      	ldr	r2, [pc, #476]	; (8004860 <DMA_SetConfig+0x230>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d059      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a76      	ldr	r2, [pc, #472]	; (8004864 <DMA_SetConfig+0x234>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d054      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a74      	ldr	r2, [pc, #464]	; (8004868 <DMA_SetConfig+0x238>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d04f      	beq.n	800473a <DMA_SetConfig+0x10a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a73      	ldr	r2, [pc, #460]	; (800486c <DMA_SetConfig+0x23c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a71      	ldr	r2, [pc, #452]	; (8004870 <DMA_SetConfig+0x240>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a70      	ldr	r2, [pc, #448]	; (8004874 <DMA_SetConfig+0x244>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a6e      	ldr	r2, [pc, #440]	; (8004878 <DMA_SetConfig+0x248>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6d      	ldr	r2, [pc, #436]	; (800487c <DMA_SetConfig+0x24c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6b      	ldr	r2, [pc, #428]	; (8004880 <DMA_SetConfig+0x250>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <DMA_SetConfig+0x254>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a68      	ldr	r2, [pc, #416]	; (8004888 <DMA_SetConfig+0x258>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a67      	ldr	r2, [pc, #412]	; (800488c <DMA_SetConfig+0x25c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a65      	ldr	r2, [pc, #404]	; (8004890 <DMA_SetConfig+0x260>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <DMA_SetConfig+0x10a>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a64      	ldr	r2, [pc, #400]	; (8004894 <DMA_SetConfig+0x264>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a62      	ldr	r2, [pc, #392]	; (8004898 <DMA_SetConfig+0x268>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a61      	ldr	r2, [pc, #388]	; (800489c <DMA_SetConfig+0x26c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <DMA_SetConfig+0x10a>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5f      	ldr	r2, [pc, #380]	; (80048a0 <DMA_SetConfig+0x270>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a5e      	ldr	r2, [pc, #376]	; (80048a4 <DMA_SetConfig+0x274>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <DMA_SetConfig+0x10a>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5c      	ldr	r2, [pc, #368]	; (80048a8 <DMA_SetConfig+0x278>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <DMA_SetConfig+0x10e>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <DMA_SetConfig+0x110>
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800474c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800475e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a39      	ldr	r2, [pc, #228]	; (800484c <DMA_SetConfig+0x21c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a38      	ldr	r2, [pc, #224]	; (8004850 <DMA_SetConfig+0x220>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a36      	ldr	r2, [pc, #216]	; (8004854 <DMA_SetConfig+0x224>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a35      	ldr	r2, [pc, #212]	; (8004858 <DMA_SetConfig+0x228>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a33      	ldr	r2, [pc, #204]	; (800485c <DMA_SetConfig+0x22c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a32      	ldr	r2, [pc, #200]	; (8004860 <DMA_SetConfig+0x230>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a30      	ldr	r2, [pc, #192]	; (8004864 <DMA_SetConfig+0x234>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <DMA_SetConfig+0x238>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	; (800486c <DMA_SetConfig+0x23c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <DMA_SetConfig+0x240>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <DMA_SetConfig+0x244>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a29      	ldr	r2, [pc, #164]	; (8004878 <DMA_SetConfig+0x248>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a27      	ldr	r2, [pc, #156]	; (800487c <DMA_SetConfig+0x24c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <DMA_SetConfig+0x250>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a24      	ldr	r2, [pc, #144]	; (8004884 <DMA_SetConfig+0x254>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <DMA_SetConfig+0x1d0>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a23      	ldr	r2, [pc, #140]	; (8004888 <DMA_SetConfig+0x258>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <DMA_SetConfig+0x1d4>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <DMA_SetConfig+0x1d6>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d059      	beq.n	80048be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	223f      	movs	r2, #63	; 0x3f
 8004814:	409a      	lsls	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004828:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d138      	bne.n	80048ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800484a:	e086      	b.n	800495a <DMA_SetConfig+0x32a>
 800484c:	40020010 	.word	0x40020010
 8004850:	40020028 	.word	0x40020028
 8004854:	40020040 	.word	0x40020040
 8004858:	40020058 	.word	0x40020058
 800485c:	40020070 	.word	0x40020070
 8004860:	40020088 	.word	0x40020088
 8004864:	400200a0 	.word	0x400200a0
 8004868:	400200b8 	.word	0x400200b8
 800486c:	40020410 	.word	0x40020410
 8004870:	40020428 	.word	0x40020428
 8004874:	40020440 	.word	0x40020440
 8004878:	40020458 	.word	0x40020458
 800487c:	40020470 	.word	0x40020470
 8004880:	40020488 	.word	0x40020488
 8004884:	400204a0 	.word	0x400204a0
 8004888:	400204b8 	.word	0x400204b8
 800488c:	58025408 	.word	0x58025408
 8004890:	5802541c 	.word	0x5802541c
 8004894:	58025430 	.word	0x58025430
 8004898:	58025444 	.word	0x58025444
 800489c:	58025458 	.word	0x58025458
 80048a0:	5802546c 	.word	0x5802546c
 80048a4:	58025480 	.word	0x58025480
 80048a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]
}
 80048bc:	e04d      	b.n	800495a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a29      	ldr	r2, [pc, #164]	; (8004968 <DMA_SetConfig+0x338>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <DMA_SetConfig+0x2de>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <DMA_SetConfig+0x33c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01d      	beq.n	800490e <DMA_SetConfig+0x2de>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <DMA_SetConfig+0x340>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <DMA_SetConfig+0x2de>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a24      	ldr	r2, [pc, #144]	; (8004974 <DMA_SetConfig+0x344>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <DMA_SetConfig+0x2de>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a23      	ldr	r2, [pc, #140]	; (8004978 <DMA_SetConfig+0x348>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <DMA_SetConfig+0x2de>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <DMA_SetConfig+0x34c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <DMA_SetConfig+0x2de>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a20      	ldr	r2, [pc, #128]	; (8004980 <DMA_SetConfig+0x350>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <DMA_SetConfig+0x2de>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <DMA_SetConfig+0x354>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <DMA_SetConfig+0x2e2>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <DMA_SetConfig+0x2e4>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2201      	movs	r2, #1
 8004922:	409a      	lsls	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d108      	bne.n	800494a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	60da      	str	r2, [r3, #12]
}
 8004948:	e007      	b.n	800495a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	58025408 	.word	0x58025408
 800496c:	5802541c 	.word	0x5802541c
 8004970:	58025430 	.word	0x58025430
 8004974:	58025444 	.word	0x58025444
 8004978:	58025458 	.word	0x58025458
 800497c:	5802546c 	.word	0x5802546c
 8004980:	58025480 	.word	0x58025480
 8004984:	58025494 	.word	0x58025494

08004988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a42      	ldr	r2, [pc, #264]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d04a      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a41      	ldr	r2, [pc, #260]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x11c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d045      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3f      	ldr	r2, [pc, #252]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x120>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d040      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a3e      	ldr	r2, [pc, #248]	; (8004aac <DMA_CalcBaseAndBitshift+0x124>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d03b      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x128>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d036      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x12c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d031      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a39      	ldr	r2, [pc, #228]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x130>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02c      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a38      	ldr	r2, [pc, #224]	; (8004abc <DMA_CalcBaseAndBitshift+0x134>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d027      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a36      	ldr	r2, [pc, #216]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x138>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a35      	ldr	r2, [pc, #212]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x13c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d01d      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a33      	ldr	r2, [pc, #204]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x140>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a32      	ldr	r2, [pc, #200]	; (8004acc <DMA_CalcBaseAndBitshift+0x144>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a30      	ldr	r2, [pc, #192]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x148>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2f      	ldr	r2, [pc, #188]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2d      	ldr	r2, [pc, #180]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x150>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <DMA_CalcBaseAndBitshift+0xa8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <DMA_CalcBaseAndBitshift+0x154>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <DMA_CalcBaseAndBitshift+0xac>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <DMA_CalcBaseAndBitshift+0xae>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d024      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3b10      	subs	r3, #16
 8004a42:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <DMA_CalcBaseAndBitshift+0x158>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a54:	5cd3      	ldrb	r3, [r2, r3]
 8004a56:	461a      	mov	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d908      	bls.n	8004a74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	1d1a      	adds	r2, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	659a      	str	r2, [r3, #88]	; 0x58
 8004a72:	e00d      	b.n	8004a90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6593      	str	r3, [r2, #88]	; 0x58
 8004a82:	e005      	b.n	8004a90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40020010 	.word	0x40020010
 8004aa4:	40020028 	.word	0x40020028
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	40020058 	.word	0x40020058
 8004ab0:	40020070 	.word	0x40020070
 8004ab4:	40020088 	.word	0x40020088
 8004ab8:	400200a0 	.word	0x400200a0
 8004abc:	400200b8 	.word	0x400200b8
 8004ac0:	40020410 	.word	0x40020410
 8004ac4:	40020428 	.word	0x40020428
 8004ac8:	40020440 	.word	0x40020440
 8004acc:	40020458 	.word	0x40020458
 8004ad0:	40020470 	.word	0x40020470
 8004ad4:	40020488 	.word	0x40020488
 8004ad8:	400204a0 	.word	0x400204a0
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	aaaaaaab 	.word	0xaaaaaaab
 8004ae4:	0800a1f4 	.word	0x0800a1f4
 8004ae8:	fffffc00 	.word	0xfffffc00

08004aec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d120      	bne.n	8004b42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d858      	bhi.n	8004bba <DMA_CheckFifoParam+0xce>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <DMA_CheckFifoParam+0x24>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b33 	.word	0x08004b33
 8004b18:	08004b21 	.word	0x08004b21
 8004b1c:	08004bbb 	.word	0x08004bbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d048      	beq.n	8004bbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b30:	e045      	b.n	8004bbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b3a:	d142      	bne.n	8004bc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b40:	e03f      	b.n	8004bc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4a:	d123      	bne.n	8004b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d838      	bhi.n	8004bc6 <DMA_CheckFifoParam+0xda>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <DMA_CheckFifoParam+0x70>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b6d 	.word	0x08004b6d
 8004b60:	08004b73 	.word	0x08004b73
 8004b64:	08004b6d 	.word	0x08004b6d
 8004b68:	08004b85 	.word	0x08004b85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b70:	e030      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d025      	beq.n	8004bca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b82:	e022      	b.n	8004bca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b8c:	d11f      	bne.n	8004bce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b92:	e01c      	b.n	8004bce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d902      	bls.n	8004ba2 <DMA_CheckFifoParam+0xb6>
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d003      	beq.n	8004ba8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ba0:	e018      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba6:	e015      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8004bb8:	e00b      	b.n	8004bd2 <DMA_CheckFifoParam+0xe6>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e00a      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e008      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e006      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
    break;
 8004bd2:	bf00      	nop
    }
  }

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d022      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01d      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a30      	ldr	r2, [pc, #192]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d101      	bne.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01a      	beq.n	8004c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	3b08      	subs	r3, #8
 8004c54:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4b26      	ldr	r3, [pc, #152]	; (8004cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2201      	movs	r2, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c80:	e024      	b.n	8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3b10      	subs	r3, #16
 8004c8a:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d806      	bhi.n	8004caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d902      	bls.n	8004caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004cbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	58025408 	.word	0x58025408
 8004cdc:	5802541c 	.word	0x5802541c
 8004ce0:	58025430 	.word	0x58025430
 8004ce4:	58025444 	.word	0x58025444
 8004ce8:	58025458 	.word	0x58025458
 8004cec:	5802546c 	.word	0x5802546c
 8004cf0:	58025480 	.word	0x58025480
 8004cf4:	58025494 	.word	0x58025494
 8004cf8:	cccccccd 	.word	0xcccccccd
 8004cfc:	16009600 	.word	0x16009600
 8004d00:	58025880 	.word	0x58025880
 8004d04:	aaaaaaab 	.word	0xaaaaaaab
 8004d08:	400204b8 	.word	0x400204b8
 8004d0c:	4002040f 	.word	0x4002040f
 8004d10:	10008200 	.word	0x10008200
 8004d14:	40020880 	.word	0x40020880

08004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04a      	beq.n	8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d847      	bhi.n	8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a25      	ldr	r2, [pc, #148]	; (8004dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a24      	ldr	r2, [pc, #144]	; (8004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01d      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a15      	ldr	r2, [pc, #84]	; (8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004da0:	671a      	str	r2, [r3, #112]	; 0x70
 8004da2:	e009      	b.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004db6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	58025408 	.word	0x58025408
 8004dd4:	5802541c 	.word	0x5802541c
 8004dd8:	58025430 	.word	0x58025430
 8004ddc:	58025444 	.word	0x58025444
 8004de0:	58025458 	.word	0x58025458
 8004de4:	5802546c 	.word	0x5802546c
 8004de8:	58025480 	.word	0x58025480
 8004dec:	58025494 	.word	0x58025494
 8004df0:	1600963f 	.word	0x1600963f
 8004df4:	58025940 	.word	0x58025940
 8004df8:	1000823f 	.word	0x1000823f
 8004dfc:	40020940 	.word	0x40020940

08004e00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b098      	sub	sp, #96	; 0x60
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004e08:	4a84      	ldr	r2, [pc, #528]	; (800501c <HAL_FDCAN_Init+0x21c>)
 8004e0a:	f107 030c 	add.w	r3, r7, #12
 8004e0e:	4611      	mov	r1, r2
 8004e10:	224c      	movs	r2, #76	; 0x4c
 8004e12:	4618      	mov	r0, r3
 8004e14:	f005 f99e 	bl	800a154 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1c6      	b.n	80051b0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7e      	ldr	r2, [pc, #504]	; (8005020 <HAL_FDCAN_Init+0x220>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d106      	bne.n	8004e3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e34:	461a      	mov	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb ff84 	bl	8000d5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0210 	bic.w	r2, r2, #16
 8004e62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e64:	f7fc f9a2 	bl	80011ac <HAL_GetTick>
 8004e68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e6a:	e014      	b.n	8004e96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e6c:	f7fc f99e 	bl	80011ac <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b0a      	cmp	r3, #10
 8004e78:	d90d      	bls.n	8004e96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e80:	f043 0201 	orr.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e18c      	b.n	80051b0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d0e3      	beq.n	8004e6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eb4:	f7fc f97a 	bl	80011ac <HAL_GetTick>
 8004eb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004eba:	e014      	b.n	8004ee6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ebc:	f7fc f976 	bl	80011ac <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b0a      	cmp	r3, #10
 8004ec8:	d90d      	bls.n	8004ee6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2203      	movs	r2, #3
 8004ede:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e164      	b.n	80051b0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0e3      	beq.n	8004ebc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0202 	orr.w	r2, r2, #2
 8004f02:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7c1b      	ldrb	r3, [r3, #16]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	619a      	str	r2, [r3, #24]
 8004f1c:	e007      	b.n	8004f2e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7c5b      	ldrb	r3, [r3, #17]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d108      	bne.n	8004f48 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f44:	619a      	str	r2, [r3, #24]
 8004f46:	e007      	b.n	8004f58 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f56:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7c9b      	ldrb	r3, [r3, #18]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d108      	bne.n	8004f72 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f6e:	619a      	str	r2, [r3, #24]
 8004f70:	e007      	b.n	8004f82 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f80:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004fa6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
 8004fb6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d108      	bne.n	8004fd2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0204 	orr.w	r2, r2, #4
 8004fce:	619a      	str	r2, [r3, #24]
 8004fd0:	e030      	b.n	8005034 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02c      	beq.n	8005034 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d020      	beq.n	8005024 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ff0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0210 	orr.w	r2, r2, #16
 8005000:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d114      	bne.n	8005034 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0220 	orr.w	r2, r2, #32
 8005018:	619a      	str	r2, [r3, #24]
 800501a:	e00b      	b.n	8005034 <HAL_FDCAN_Init+0x234>
 800501c:	0800a198 	.word	0x0800a198
 8005020:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0220 	orr.w	r2, r2, #32
 8005032:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	3b01      	subs	r3, #1
 800503a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	3b01      	subs	r3, #1
 8005042:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005044:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800504c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	3b01      	subs	r3, #1
 8005056:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800505c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800505e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005068:	d115      	bne.n	8005096 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	3b01      	subs	r3, #1
 8005076:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005078:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	3b01      	subs	r3, #1
 8005080:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005082:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	3b01      	subs	r3, #1
 800508c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005092:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005094:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	4413      	add	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d011      	beq.n	80050e6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80050ca:	f023 0107 	bic.w	r1, r3, #7
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	3360      	adds	r3, #96	; 0x60
 80050d6:	443b      	add	r3, r7
 80050d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050f6:	f023 0107 	bic.w	r1, r3, #7
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	3360      	adds	r3, #96	; 0x60
 8005102:	443b      	add	r3, r7
 8005104:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005116:	2b00      	cmp	r3, #0
 8005118:	d012      	beq.n	8005140 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005122:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	3360      	adds	r3, #96	; 0x60
 800512e:	443b      	add	r3, r7
 8005130:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005134:	011a      	lsls	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005150:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	3360      	adds	r3, #96	; 0x60
 800515c:	443b      	add	r3, r7
 800515e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005162:	021a      	lsls	r2, r3, #8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <HAL_FDCAN_Init+0x3b8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d107      	bne.n	8005188 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f022 0203 	bic.w	r2, r2, #3
 8005186:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fd83 	bl	8005cac <FDCAN_CalcultateRamBlockAddresses>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80051ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3760      	adds	r7, #96	; 0x60
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	4000a000 	.word	0x4000a000

080051bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d111      	bne.n	80051f4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e008      	b.n	8005206 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d141      	bne.n	80052ae <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005232:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e038      	b.n	80052c0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e026      	b.n	80052c0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fe95 	bl	8005fb8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2101      	movs	r1, #1
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	fa01 f202 	lsl.w	r2, r1, r2
 800529a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800529e:	2201      	movs	r2, #1
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	409a      	lsls	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e008      	b.n	80052c0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b4:	f043 0208 	orr.w	r2, r3, #8
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08b      	sub	sp, #44	; 0x2c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80052e0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80052e2:	7efb      	ldrb	r3, [r7, #27]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	f040 814b 	bne.w	8005580 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d14d      	bne.n	800538c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e13e      	b.n	8005592 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800531c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800532a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e12c      	b.n	8005592 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005340:	0e1b      	lsrs	r3, r3, #24
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b01      	cmp	r3, #1
 8005348:	d10b      	bne.n	8005362 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005352:	0fdb      	lsrs	r3, r3, #31
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535c:	d101      	bne.n	8005362 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800535e:	2301      	movs	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	69f9      	ldr	r1, [r7, #28]
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	e069      	b.n	8005460 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b41      	cmp	r3, #65	; 0x41
 8005390:	d14d      	bne.n	800542e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800539a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e0ed      	b.n	8005592 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0db      	b.n	8005592 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053e2:	0e1b      	lsrs	r3, r3, #24
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10b      	bne.n	8005404 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053f4:	0fdb      	lsrs	r3, r3, #31
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fe:	d101      	bne.n	8005404 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	e018      	b.n	8005460 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	d309      	bcc.n	800544c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0a2      	b.n	8005592 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	0c9b      	lsrs	r3, r3, #18
 800547a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e005      	b.n	8005490 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	3304      	adds	r3, #4
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e1b      	lsrs	r3, r3, #24
 80054e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	0fda      	lsrs	r2, r3, #31
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	3304      	adds	r3, #4
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80054fe:	2300      	movs	r3, #0
 8005500:	623b      	str	r3, [r7, #32]
 8005502:	e00a      	b.n	800551a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	441a      	add	r2, r3
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	440b      	add	r3, r1
 8005510:	7812      	ldrb	r2, [r2, #0]
 8005512:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	3301      	adds	r3, #1
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8005522:	5cd3      	ldrb	r3, [r2, r3]
 8005524:	461a      	mov	r2, r3
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	4293      	cmp	r3, r2
 800552a:	d3eb      	bcc.n	8005504 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d105      	bne.n	800553e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800553c:	e01e      	b.n	800557c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b41      	cmp	r3, #65	; 0x41
 8005542:	d105      	bne.n	8005550 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800554e:	e015      	b.n	800557c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b1f      	cmp	r3, #31
 8005554:	d808      	bhi.n	8005568 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2101      	movs	r1, #1
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	fa01 f202 	lsl.w	r2, r1, r2
 8005562:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005566:	e009      	b.n	800557c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 021f 	and.w	r2, r3, #31
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2101      	movs	r1, #1
 8005574:	fa01 f202 	lsl.w	r2, r1, r2
 8005578:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e008      	b.n	8005592 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005586:	f043 0208 	orr.w	r2, r3, #8
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	372c      	adds	r7, #44	; 0x2c
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	0800a1fc 	.word	0x0800a1fc

080055a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80055b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d002      	beq.n	80055c4 <HAL_FDCAN_ActivateNotification+0x20>
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d155      	bne.n	8005670 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80055e2:	e014      	b.n	800560e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4013      	ands	r3, r2
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d108      	bne.n	8005606 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0202 	orr.w	r2, r2, #2
 8005602:	65da      	str	r2, [r3, #92]	; 0x5c
 8005604:	e003      	b.n	800560e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2203      	movs	r2, #3
 800560c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	430a      	orrs	r2, r1
 8005628:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	430a      	orrs	r2, r1
 8005646:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <HAL_FDCAN_ActivateNotification+0xec>)
 8005654:	4013      	ands	r3, r2
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	430b      	orrs	r3, r1
 800565c:	6553      	str	r3, [r2, #84]	; 0x54
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	0f9b      	lsrs	r3, r3, #30
 8005666:	490b      	ldr	r1, [pc, #44]	; (8005694 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005668:	4313      	orrs	r3, r2
 800566a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e008      	b.n	8005682 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005676:	f043 0202 	orr.w	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	3fcfffff 	.word	0x3fcfffff
 8005694:	4000a800 	.word	0x4000a800

08005698 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b096      	sub	sp, #88	; 0x58
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80056a0:	4b9a      	ldr	r3, [pc, #616]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	079b      	lsls	r3, r3, #30
 80056a6:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80056a8:	4b98      	ldr	r3, [pc, #608]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	079b      	lsls	r3, r3, #30
 80056ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056b0:	4013      	ands	r3, r2
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056be:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056c8:	4013      	ands	r3, r2
 80056ca:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056e0:	4013      	ands	r3, r2
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f8:	4013      	ands	r3, r2
 80056fa:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005702:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005710:	4013      	ands	r3, r2
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800571e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005728:	4013      	ands	r3, r2
 800572a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800573c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d010      	beq.n	800576a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
 800575e:	4b6b      	ldr	r3, [pc, #428]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 8005760:	2200      	movs	r2, #0
 8005762:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa54 	bl	8005c12 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800576a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576c:	0a9b      	lsrs	r3, r3, #10
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01d      	beq.n	80057b2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	0a9b      	lsrs	r3, r3, #10
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d017      	beq.n	80057b2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005796:	4013      	ands	r3, r2
 8005798:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057a2:	651a      	str	r2, [r3, #80]	; 0x50
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80057aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa07 	bl	8005bc0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80057b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00d      	beq.n	80057d4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057be:	4b54      	ldr	r3, [pc, #336]	; (8005910 <HAL_FDCAN_IRQHandler+0x278>)
 80057c0:	400b      	ands	r3, r1
 80057c2:	6513      	str	r3, [r2, #80]	; 0x50
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80057c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c8:	0f9b      	lsrs	r3, r3, #30
 80057ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80057cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9c0 	bl	8005b54 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80057d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057e0:	4b4b      	ldr	r3, [pc, #300]	; (8005910 <HAL_FDCAN_IRQHandler+0x278>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	6513      	str	r3, [r2, #80]	; 0x50
 80057e6:	4a49      	ldr	r2, [pc, #292]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80057e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ea:	0f9b      	lsrs	r3, r3, #30
 80057ec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80057ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f9ba 	bl	8005b6a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80057f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00d      	beq.n	8005818 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005802:	4b43      	ldr	r3, [pc, #268]	; (8005910 <HAL_FDCAN_IRQHandler+0x278>)
 8005804:	400b      	ands	r3, r1
 8005806:	6513      	str	r3, [r2, #80]	; 0x50
 8005808:	4a40      	ldr	r2, [pc, #256]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 800580a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580c:	0f9b      	lsrs	r3, r3, #30
 800580e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005810:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fa fde4 	bl	80003e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005824:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <HAL_FDCAN_IRQHandler+0x278>)
 8005826:	400b      	ands	r3, r1
 8005828:	6513      	str	r3, [r2, #80]	; 0x50
 800582a:	4a38      	ldr	r2, [pc, #224]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 800582c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582e:	0f9b      	lsrs	r3, r3, #30
 8005830:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005832:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f9a3 	bl	8005b80 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	0adb      	lsrs	r3, r3, #11
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	0adb      	lsrs	r3, r3, #11
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800585a:	651a      	str	r2, [r3, #80]	; 0x50
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f997 	bl	8005b96 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	0a5b      	lsrs	r3, r3, #9
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01d      	beq.n	80058b0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	0a5b      	lsrs	r3, r3, #9
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d017      	beq.n	80058b0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005894:	4013      	ands	r3, r2
 8005896:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a0:	651a      	str	r2, [r3, #80]	; 0x50
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80058a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f97d 	bl	8005baa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	0cdb      	lsrs	r3, r3, #19
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	0cdb      	lsrs	r3, r3, #19
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80058d0:	651a      	str	r2, [r3, #80]	; 0x50
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f97c 	bl	8005bd6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80058de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058fe:	651a      	str	r2, [r3, #80]	; 0x50
 8005900:	4b02      	ldr	r3, [pc, #8]	; (800590c <HAL_FDCAN_IRQHandler+0x274>)
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	e004      	b.n	8005914 <HAL_FDCAN_IRQHandler+0x27c>
 800590a:	bf00      	nop
 800590c:	4000a800 	.word	0x4000a800
 8005910:	3fcfffff 	.word	0x3fcfffff
 8005914:	f000 f969 	bl	8005bea <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	0c9b      	lsrs	r3, r3, #18
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	0c9b      	lsrs	r3, r3, #18
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005938:	651a      	str	r2, [r3, #80]	; 0x50
 800593a:	4b83      	ldr	r3, [pc, #524]	; (8005b48 <HAL_FDCAN_IRQHandler+0x4b0>)
 800593c:	2200      	movs	r2, #0
 800593e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f95c 	bl	8005bfe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	0c5b      	lsrs	r3, r3, #17
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	0c5b      	lsrs	r3, r3, #17
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00f      	beq.n	800597e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005966:	651a      	str	r2, [r3, #80]	; 0x50
 8005968:	4b77      	ldr	r3, [pc, #476]	; (8005b48 <HAL_FDCAN_IRQHandler+0x4b0>)
 800596a:	2200      	movs	r2, #0
 800596c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005974:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800597e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800598a:	4b70      	ldr	r3, [pc, #448]	; (8005b4c <HAL_FDCAN_IRQHandler+0x4b4>)
 800598c:	400b      	ands	r3, r1
 800598e:	6513      	str	r3, [r2, #80]	; 0x50
 8005990:	4a6d      	ldr	r2, [pc, #436]	; (8005b48 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005994:	0f9b      	lsrs	r3, r3, #30
 8005996:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f94d 	bl	8005c3a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80059a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059ac:	4b67      	ldr	r3, [pc, #412]	; (8005b4c <HAL_FDCAN_IRQHandler+0x4b4>)
 80059ae:	400b      	ands	r3, r1
 80059b0:	6513      	str	r3, [r2, #80]	; 0x50
 80059b2:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <HAL_FDCAN_IRQHandler+0x4b0>)
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	0f9b      	lsrs	r3, r3, #30
 80059b8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80059c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a60      	ldr	r2, [pc, #384]	; (8005b50 <HAL_FDCAN_IRQHandler+0x4b8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	f040 80ac 	bne.w	8005b2e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80a4 	beq.w	8005b2e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fa:	4013      	ands	r3, r2
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a12:	4013      	ands	r3, r2
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005a38:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	4013      	ands	r3, r2
 8005a44:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005a50:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005a7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8e6 	bl	8005c50 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8e6 	bl	8005c66 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	099b      	lsrs	r3, r3, #6
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01a      	beq.n	8005adc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d014      	beq.n	8005adc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	6939      	ldr	r1, [r7, #16]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8d0 	bl	8005c7c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8d1 	bl	8005c94 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f874 	bl	8005c26 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005b3e:	bf00      	nop
 8005b40:	3758      	adds	r7, #88	; 0x58
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	4000a800 	.word	0x4000a800
 8005b4c:	3fcfffff 	.word	0x3fcfffff
 8005b50:	4000a000 	.word	0x4000a000

08005b54 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005cc2:	4ba7      	ldr	r3, [pc, #668]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0091      	lsls	r1, r2, #2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cdc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	041a      	lsls	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d02:	4b97      	ldr	r3, [pc, #604]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	0091      	lsls	r1, r2, #2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	041a      	lsls	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4413      	add	r3, r2
 8005d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005d44:	4b86      	ldr	r3, [pc, #536]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0091      	lsls	r1, r2, #2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	430b      	orrs	r3, r1
 8005d52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d5e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	041a      	lsls	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d8c:	4b74      	ldr	r3, [pc, #464]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	0091      	lsls	r1, r2, #2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005da6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dae:	041a      	lsls	r2, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4413      	add	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005dd4:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	0091      	lsls	r1, r2, #2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	430b      	orrs	r3, r1
 8005de2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005e00:	4b57      	ldr	r3, [pc, #348]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	0091      	lsls	r1, r2, #2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e1a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	041a      	lsls	r2, r3, #16
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	4413      	add	r3, r2
 8005e38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005e42:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0091      	lsls	r1, r2, #2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e5c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	041a      	lsls	r2, r3, #16
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e78:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e80:	061a      	lsls	r2, r3, #24
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e90:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005e92:	4413      	add	r3, r2
 8005e94:	009a      	lsls	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	441a      	add	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d915      	bls.n	8005f88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005f5c:	e006      	b.n	8005f6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005f5e:	bf00      	nop
 8005f60:	ffff0003 	.word	0xffff0003
 8005f64:	10002b00 	.word	0x10002b00
 8005f68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e010      	b.n	8005faa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e005      	b.n	8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3f3      	bcc.n	8005f90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop

08005fb8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	; 0x24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005fd6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e00a      	b.n	8005ffa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005fec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005ff2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006004:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800600a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006010:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	3304      	adds	r3, #4
 800603a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	3304      	adds	r3, #4
 8006046:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e020      	b.n	8006090 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3303      	adds	r3, #3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4413      	add	r3, r2
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3302      	adds	r3, #2
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	440b      	add	r3, r1
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006066:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	440b      	add	r3, r1
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006074:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	440a      	add	r2, r1
 800607c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800607e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	3304      	adds	r3, #4
 8006088:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	3304      	adds	r3, #4
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	4a06      	ldr	r2, [pc, #24]	; (80060b0 <FDCAN_CopyMessageToRAM+0xf8>)
 8006098:	5cd3      	ldrb	r3, [r2, r3]
 800609a:	461a      	mov	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4293      	cmp	r3, r2
 80060a0:	d3d5      	bcc.n	800604e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	3724      	adds	r7, #36	; 0x24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	0800a1fc 	.word	0x0800a1fc

080060b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80060c2:	4b89      	ldr	r3, [pc, #548]	; (80062e8 <HAL_GPIO_Init+0x234>)
 80060c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060c6:	e194      	b.n	80063f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	2101      	movs	r1, #1
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	fa01 f303 	lsl.w	r3, r1, r3
 80060d4:	4013      	ands	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8186 	beq.w	80063ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d005      	beq.n	80060f8 <HAL_GPIO_Init+0x44>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d130      	bne.n	800615a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	2203      	movs	r2, #3
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800612e:	2201      	movs	r2, #1
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	f003 0201 	and.w	r2, r3, #1
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d017      	beq.n	8006196 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	2203      	movs	r2, #3
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d123      	bne.n	80061ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	08da      	lsrs	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3208      	adds	r2, #8
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	220f      	movs	r2, #15
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4013      	ands	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	08da      	lsrs	r2, r3, #3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3208      	adds	r2, #8
 80061e4:	69b9      	ldr	r1, [r7, #24]
 80061e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	2203      	movs	r2, #3
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 0203 	and.w	r2, r3, #3
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80e0 	beq.w	80063ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622c:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <HAL_GPIO_Init+0x238>)
 800622e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006232:	4a2e      	ldr	r2, [pc, #184]	; (80062ec <HAL_GPIO_Init+0x238>)
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800623c:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <HAL_GPIO_Init+0x238>)
 800623e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800624a:	4a29      	ldr	r2, [pc, #164]	; (80062f0 <HAL_GPIO_Init+0x23c>)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	089b      	lsrs	r3, r3, #2
 8006250:	3302      	adds	r3, #2
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	220f      	movs	r2, #15
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <HAL_GPIO_Init+0x240>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d052      	beq.n	800631c <HAL_GPIO_Init+0x268>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <HAL_GPIO_Init+0x244>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <HAL_GPIO_Init+0x22e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <HAL_GPIO_Init+0x248>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d02b      	beq.n	80062de <HAL_GPIO_Init+0x22a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_GPIO_Init+0x24c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d025      	beq.n	80062da <HAL_GPIO_Init+0x226>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <HAL_GPIO_Init+0x250>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01f      	beq.n	80062d6 <HAL_GPIO_Init+0x222>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <HAL_GPIO_Init+0x254>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d019      	beq.n	80062d2 <HAL_GPIO_Init+0x21e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1a      	ldr	r2, [pc, #104]	; (800630c <HAL_GPIO_Init+0x258>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_GPIO_Init+0x21a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a19      	ldr	r2, [pc, #100]	; (8006310 <HAL_GPIO_Init+0x25c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00d      	beq.n	80062ca <HAL_GPIO_Init+0x216>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a18      	ldr	r2, [pc, #96]	; (8006314 <HAL_GPIO_Init+0x260>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d007      	beq.n	80062c6 <HAL_GPIO_Init+0x212>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a17      	ldr	r2, [pc, #92]	; (8006318 <HAL_GPIO_Init+0x264>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <HAL_GPIO_Init+0x20e>
 80062be:	2309      	movs	r3, #9
 80062c0:	e02d      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062c2:	230a      	movs	r3, #10
 80062c4:	e02b      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062c6:	2308      	movs	r3, #8
 80062c8:	e029      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062ca:	2307      	movs	r3, #7
 80062cc:	e027      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062ce:	2306      	movs	r3, #6
 80062d0:	e025      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062d2:	2305      	movs	r3, #5
 80062d4:	e023      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062d6:	2304      	movs	r3, #4
 80062d8:	e021      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062da:	2303      	movs	r3, #3
 80062dc:	e01f      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062de:	2302      	movs	r3, #2
 80062e0:	e01d      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e01b      	b.n	800631e <HAL_GPIO_Init+0x26a>
 80062e6:	bf00      	nop
 80062e8:	58000080 	.word	0x58000080
 80062ec:	58024400 	.word	0x58024400
 80062f0:	58000400 	.word	0x58000400
 80062f4:	58020000 	.word	0x58020000
 80062f8:	58020400 	.word	0x58020400
 80062fc:	58020800 	.word	0x58020800
 8006300:	58020c00 	.word	0x58020c00
 8006304:	58021000 	.word	0x58021000
 8006308:	58021400 	.word	0x58021400
 800630c:	58021800 	.word	0x58021800
 8006310:	58021c00 	.word	0x58021c00
 8006314:	58022000 	.word	0x58022000
 8006318:	58022400 	.word	0x58022400
 800631c:	2300      	movs	r3, #0
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	f002 0203 	and.w	r2, r2, #3
 8006324:	0092      	lsls	r2, r2, #2
 8006326:	4093      	lsls	r3, r2
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4313      	orrs	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800632e:	4938      	ldr	r1, [pc, #224]	; (8006410 <HAL_GPIO_Init+0x35c>)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	3302      	adds	r3, #2
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	43db      	mvns	r3, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	4013      	ands	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	4013      	ands	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	43db      	mvns	r3, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	4013      	ands	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f ae63 	bne.w	80060c8 <HAL_GPIO_Init+0x14>
  }
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3724      	adds	r7, #36	; 0x24
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	58000400 	.word	0x58000400

08006414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	807b      	strh	r3, [r7, #2]
 8006420:	4613      	mov	r3, r2
 8006422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006424:	787b      	ldrb	r3, [r7, #1]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006430:	e003      	b.n	800643a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006432:	887b      	ldrh	r3, [r7, #2]
 8006434:	041a      	lsls	r2, r3, #16
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	619a      	str	r2, [r3, #24]
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006458:	887a      	ldrh	r2, [r7, #2]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4013      	ands	r3, r2
 800645e:	041a      	lsls	r2, r3, #16
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	43d9      	mvns	r1, r3
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	400b      	ands	r3, r1
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	619a      	str	r2, [r3, #24]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d00a      	beq.n	80064a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006490:	4b16      	ldr	r3, [pc, #88]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d001      	beq.n	80064a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e01f      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e01d      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f023 0207 	bic.w	r2, r3, #7
 80064ae:	490f      	ldr	r1, [pc, #60]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064b6:	f7fa fe79 	bl	80011ac <HAL_GetTick>
 80064ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064bc:	e009      	b.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064be:	f7fa fe75 	bl	80011ac <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064cc:	d901      	bls.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e007      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d1ee      	bne.n	80064be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	58024800 	.word	0x58024800

080064f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f000 bc1d 	b.w	8006d3e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8087 	beq.w	8006620 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006512:	4b99      	ldr	r3, [pc, #612]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800651c:	4b96      	ldr	r3, [pc, #600]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b10      	cmp	r3, #16
 8006526:	d007      	beq.n	8006538 <HAL_RCC_OscConfig+0x48>
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2b18      	cmp	r3, #24
 800652c:	d110      	bne.n	8006550 <HAL_RCC_OscConfig+0x60>
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d10b      	bne.n	8006550 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006538:	4b8f      	ldr	r3, [pc, #572]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d06c      	beq.n	800661e <HAL_RCC_OscConfig+0x12e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d168      	bne.n	800661e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e3f6      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006558:	d106      	bne.n	8006568 <HAL_RCC_OscConfig+0x78>
 800655a:	4b87      	ldr	r3, [pc, #540]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a86      	ldr	r2, [pc, #536]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e02e      	b.n	80065c6 <HAL_RCC_OscConfig+0xd6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <HAL_RCC_OscConfig+0x9a>
 8006570:	4b81      	ldr	r3, [pc, #516]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4b7e      	ldr	r3, [pc, #504]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a7d      	ldr	r2, [pc, #500]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e01d      	b.n	80065c6 <HAL_RCC_OscConfig+0xd6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006592:	d10c      	bne.n	80065ae <HAL_RCC_OscConfig+0xbe>
 8006594:	4b78      	ldr	r3, [pc, #480]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a77      	ldr	r2, [pc, #476]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800659a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	4b75      	ldr	r3, [pc, #468]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e00b      	b.n	80065c6 <HAL_RCC_OscConfig+0xd6>
 80065ae:	4b72      	ldr	r3, [pc, #456]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a71      	ldr	r2, [pc, #452]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	4b6f      	ldr	r3, [pc, #444]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a6e      	ldr	r2, [pc, #440]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ce:	f7fa fded 	bl	80011ac <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d6:	f7fa fde9 	bl	80011ac <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b64      	cmp	r3, #100	; 0x64
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e3aa      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065e8:	4b63      	ldr	r3, [pc, #396]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0xe6>
 80065f4:	e014      	b.n	8006620 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f6:	f7fa fdd9 	bl	80011ac <HAL_GetTick>
 80065fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065fe:	f7fa fdd5 	bl	80011ac <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b64      	cmp	r3, #100	; 0x64
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e396      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006610:	4b59      	ldr	r3, [pc, #356]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f0      	bne.n	80065fe <HAL_RCC_OscConfig+0x10e>
 800661c:	e000      	b.n	8006620 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80cb 	beq.w	80067c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800662e:	4b52      	ldr	r3, [pc, #328]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006636:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006638:	4b4f      	ldr	r3, [pc, #316]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_RCC_OscConfig+0x164>
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b18      	cmp	r3, #24
 8006648:	d156      	bne.n	80066f8 <HAL_RCC_OscConfig+0x208>
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d151      	bne.n	80066f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCC_OscConfig+0x17c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e368      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f023 0219 	bic.w	r2, r3, #25
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	493f      	ldr	r1, [pc, #252]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800667e:	f7fa fd95 	bl	80011ac <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006686:	f7fa fd91 	bl	80011ac <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e352      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006698:	4b37      	ldr	r3, [pc, #220]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a4:	f7fa fdb2 	bl	800120c <HAL_GetREVID>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d817      	bhi.n	80066e2 <HAL_RCC_OscConfig+0x1f2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d108      	bne.n	80066cc <HAL_RCC_OscConfig+0x1dc>
 80066ba:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80066c2:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ca:	e07b      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066cc:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	4927      	ldr	r1, [pc, #156]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066e0:	e070      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e2:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	4921      	ldr	r1, [pc, #132]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f6:	e065      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d048      	beq.n	8006792 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f023 0219 	bic.w	r2, r3, #25
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	491a      	ldr	r1, [pc, #104]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fa fd4b 	bl	80011ac <HAL_GetTick>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800671a:	f7fa fd47 	bl	80011ac <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e308      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006738:	f7fa fd68 	bl	800120c <HAL_GetREVID>
 800673c:	4603      	mov	r3, r0
 800673e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006742:	4293      	cmp	r3, r2
 8006744:	d81a      	bhi.n	800677c <HAL_RCC_OscConfig+0x28c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d108      	bne.n	8006760 <HAL_RCC_OscConfig+0x270>
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	6053      	str	r3, [r2, #4]
 800675e:	e031      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	031b      	lsls	r3, r3, #12
 800676e:	4902      	ldr	r1, [pc, #8]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006770:	4313      	orrs	r3, r2
 8006772:	604b      	str	r3, [r1, #4]
 8006774:	e026      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	4b9a      	ldr	r3, [pc, #616]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	4997      	ldr	r1, [pc, #604]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
 8006790:	e018      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006792:	4b95      	ldr	r3, [pc, #596]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a94      	ldr	r2, [pc, #592]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679e:	f7fa fd05 	bl	80011ac <HAL_GetTick>
 80067a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067a6:	f7fa fd01 	bl	80011ac <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e2c2      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067b8:	4b8b      	ldr	r3, [pc, #556]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f0      	bne.n	80067a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80a9 	beq.w	8006924 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d2:	4b85      	ldr	r3, [pc, #532]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d007      	beq.n	80067f8 <HAL_RCC_OscConfig+0x308>
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b18      	cmp	r3, #24
 80067ec:	d13a      	bne.n	8006864 <HAL_RCC_OscConfig+0x374>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d135      	bne.n	8006864 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067f8:	4b7b      	ldr	r3, [pc, #492]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_OscConfig+0x320>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d001      	beq.n	8006810 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e296      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006810:	f7fa fcfc 	bl	800120c <HAL_GetREVID>
 8006814:	4603      	mov	r3, r0
 8006816:	f241 0203 	movw	r2, #4099	; 0x1003
 800681a:	4293      	cmp	r3, r2
 800681c:	d817      	bhi.n	800684e <HAL_RCC_OscConfig+0x35e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	2b20      	cmp	r3, #32
 8006824:	d108      	bne.n	8006838 <HAL_RCC_OscConfig+0x348>
 8006826:	4b70      	ldr	r3, [pc, #448]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800682e:	4a6e      	ldr	r2, [pc, #440]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006834:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006836:	e075      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006838:	4b6b      	ldr	r3, [pc, #428]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	069b      	lsls	r3, r3, #26
 8006846:	4968      	ldr	r1, [pc, #416]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800684c:	e06a      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	061b      	lsls	r3, r3, #24
 800685c:	4962      	ldr	r1, [pc, #392]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800685e:	4313      	orrs	r3, r2
 8006860:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006862:	e05f      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d042      	beq.n	80068f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800686c:	4b5e      	ldr	r3, [pc, #376]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5d      	ldr	r2, [pc, #372]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fa fc98 	bl	80011ac <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006880:	f7fa fc94 	bl	80011ac <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e255      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006892:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800689e:	f7fa fcb5 	bl	800120c <HAL_GetREVID>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d817      	bhi.n	80068dc <HAL_RCC_OscConfig+0x3ec>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d108      	bne.n	80068c6 <HAL_RCC_OscConfig+0x3d6>
 80068b4:	4b4c      	ldr	r3, [pc, #304]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068bc:	4a4a      	ldr	r2, [pc, #296]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c2:	6053      	str	r3, [r2, #4]
 80068c4:	e02e      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
 80068c6:	4b48      	ldr	r3, [pc, #288]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	069b      	lsls	r3, r3, #26
 80068d4:	4944      	ldr	r1, [pc, #272]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	604b      	str	r3, [r1, #4]
 80068da:	e023      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
 80068dc:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	493f      	ldr	r1, [pc, #252]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60cb      	str	r3, [r1, #12]
 80068f0:	e018      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068f2:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a3c      	ldr	r2, [pc, #240]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fe:	f7fa fc55 	bl	80011ac <HAL_GetTick>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006906:	f7fa fc51 	bl	80011ac <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e212      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006918:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f0      	bne.n	8006906 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d036      	beq.n	800699e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d019      	beq.n	800696c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006938:	4b2b      	ldr	r3, [pc, #172]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fa fc32 	bl	80011ac <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694c:	f7fa fc2e 	bl	80011ac <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e1ef      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x45c>
 800696a:	e018      	b.n	800699e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800696c:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800696e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006970:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006978:	f7fa fc18 	bl	80011ac <HAL_GetTick>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006980:	f7fa fc14 	bl	80011ac <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e1d5      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d039      	beq.n	8006a1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01c      	beq.n	80069ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80069b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069be:	f7fa fbf5 	bl	80011ac <HAL_GetTick>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069c6:	f7fa fbf1 	bl	80011ac <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e1b2      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x4d6>
 80069e4:	e01b      	b.n	8006a1e <HAL_RCC_OscConfig+0x52e>
 80069e6:	bf00      	nop
 80069e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069ec:	4b9b      	ldr	r3, [pc, #620]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a9a      	ldr	r2, [pc, #616]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 80069f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069f8:	f7fa fbd8 	bl	80011ac <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a00:	f7fa fbd4 	bl	80011ac <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e195      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a12:	4b92      	ldr	r3, [pc, #584]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8081 	beq.w	8006b2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a2c:	4b8c      	ldr	r3, [pc, #560]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a8b      	ldr	r2, [pc, #556]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a38:	f7fa fbb8 	bl	80011ac <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a40:	f7fa fbb4 	bl	80011ac <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e175      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a52:	4b83      	ldr	r3, [pc, #524]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d106      	bne.n	8006a74 <HAL_RCC_OscConfig+0x584>
 8006a66:	4b7d      	ldr	r3, [pc, #500]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	4a7c      	ldr	r2, [pc, #496]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6713      	str	r3, [r2, #112]	; 0x70
 8006a72:	e02d      	b.n	8006ad0 <HAL_RCC_OscConfig+0x5e0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RCC_OscConfig+0x5a6>
 8006a7c:	4b77      	ldr	r3, [pc, #476]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	4a76      	ldr	r2, [pc, #472]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a82:	f023 0301 	bic.w	r3, r3, #1
 8006a86:	6713      	str	r3, [r2, #112]	; 0x70
 8006a88:	4b74      	ldr	r3, [pc, #464]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	4a73      	ldr	r2, [pc, #460]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a8e:	f023 0304 	bic.w	r3, r3, #4
 8006a92:	6713      	str	r3, [r2, #112]	; 0x70
 8006a94:	e01c      	b.n	8006ad0 <HAL_RCC_OscConfig+0x5e0>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5c8>
 8006a9e:	4b6f      	ldr	r3, [pc, #444]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a6e      	ldr	r2, [pc, #440]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	f043 0304 	orr.w	r3, r3, #4
 8006aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aaa:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	4a6b      	ldr	r2, [pc, #428]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0x5e0>
 8006ab8:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac4:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac8:	4a64      	ldr	r2, [pc, #400]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aca:	f023 0304 	bic.w	r3, r3, #4
 8006ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fa fb68 	bl	80011ac <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fa fb64 	bl	80011ac <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e123      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006af6:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0ee      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x5f0>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fa fb52 	bl	80011ac <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b0a:	e00a      	b.n	8006b22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b0c:	f7fa fb4e 	bl	80011ac <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e10d      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b22:	4b4e      	ldr	r3, [pc, #312]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1ee      	bne.n	8006b0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8102 	beq.w	8006d3c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b38:	4b48      	ldr	r3, [pc, #288]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b40:	2b18      	cmp	r3, #24
 8006b42:	f000 80bd 	beq.w	8006cc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	f040 809e 	bne.w	8006c8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b50:	4b42      	ldr	r3, [pc, #264]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a41      	ldr	r2, [pc, #260]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fa fb26 	bl	80011ac <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b64:	f7fa fb22 	bl	80011ac <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e0e3      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b82:	4b36      	ldr	r3, [pc, #216]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b86:	4b37      	ldr	r3, [pc, #220]	; (8006c64 <HAL_RCC_OscConfig+0x774>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b92:	0112      	lsls	r2, r2, #4
 8006b94:	430a      	orrs	r2, r1
 8006b96:	4931      	ldr	r1, [pc, #196]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	3b01      	subs	r3, #1
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bcc:	4923      	ldr	r1, [pc, #140]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	4a21      	ldr	r2, [pc, #132]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bde:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <HAL_RCC_OscConfig+0x778>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bea:	00d2      	lsls	r2, r2, #3
 8006bec:	491b      	ldr	r1, [pc, #108]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	f023 020c 	bic.w	r2, r3, #12
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4917      	ldr	r1, [pc, #92]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	f023 0202 	bic.w	r2, r3, #2
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	4912      	ldr	r1, [pc, #72]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c22:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c3a:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fa faab 	bl	80011ac <HAL_GetTick>
 8006c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c58:	e011      	b.n	8006c7e <HAL_RCC_OscConfig+0x78e>
 8006c5a:	bf00      	nop
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	58024800 	.word	0x58024800
 8006c64:	fffffc0c 	.word	0xfffffc0c
 8006c68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c6c:	f7fa fa9e 	bl	80011ac <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e05f      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c7e:	4b32      	ldr	r3, [pc, #200]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0x77c>
 8006c8a:	e057      	b.n	8006d3c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8c:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fa fa88 	bl	80011ac <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fa fa84 	bl	80011ac <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e045      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x7b0>
 8006cbe:	e03d      	b.n	8006d3c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006cc0:	4b21      	ldr	r3, [pc, #132]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cc6:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d031      	beq.n	8006d38 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f003 0203 	and.w	r2, r3, #3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d12a      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d122      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d11a      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	0a5b      	lsrs	r3, r3, #9
 8006d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d111      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d108      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3730      	adds	r7, #48	; 0x30
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	58024400 	.word	0x58024400

08006d4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e19c      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d60:	4b8a      	ldr	r3, [pc, #552]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d910      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b87      	ldr	r3, [pc, #540]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 020f 	bic.w	r2, r3, #15
 8006d76:	4985      	ldr	r1, [pc, #532]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b83      	ldr	r3, [pc, #524]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e184      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	4b7b      	ldr	r3, [pc, #492]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d908      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dac:	4b78      	ldr	r3, [pc, #480]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	4975      	ldr	r1, [pc, #468]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	4b70      	ldr	r3, [pc, #448]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d908      	bls.n	8006dec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dda:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	496a      	ldr	r1, [pc, #424]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	4b64      	ldr	r3, [pc, #400]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d908      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e08:	4b61      	ldr	r3, [pc, #388]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	495e      	ldr	r1, [pc, #376]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d010      	beq.n	8006e48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	4b59      	ldr	r3, [pc, #356]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d908      	bls.n	8006e48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e36:	4b56      	ldr	r3, [pc, #344]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4953      	ldr	r1, [pc, #332]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d010      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	4b4d      	ldr	r3, [pc, #308]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d908      	bls.n	8006e76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e64:	4b4a      	ldr	r3, [pc, #296]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f023 020f 	bic.w	r2, r3, #15
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4947      	ldr	r1, [pc, #284]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d055      	beq.n	8006f2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e82:	4b43      	ldr	r3, [pc, #268]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	4940      	ldr	r1, [pc, #256]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d107      	bne.n	8006eac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e9c:	4b3c      	ldr	r3, [pc, #240]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d121      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0f6      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d115      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0ea      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d107      	bne.n	8006edc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ecc:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0de      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006edc:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0d6      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eec:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f023 0207 	bic.w	r2, r3, #7
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4925      	ldr	r1, [pc, #148]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fa f955 	bl	80011ac <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f06:	f7fa f951 	bl	80011ac <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e0be      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1c:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d1eb      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d010      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d208      	bcs.n	8006f5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f023 020f 	bic.w	r2, r3, #15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	490e      	ldr	r1, [pc, #56]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d214      	bcs.n	8006f94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 020f 	bic.w	r2, r3, #15
 8006f72:	4906      	ldr	r1, [pc, #24]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d005      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e086      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
 8006f8c:	52002000 	.word	0x52002000
 8006f90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d010      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d208      	bcs.n	8006fc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fb0:	4b3c      	ldr	r3, [pc, #240]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4939      	ldr	r1, [pc, #228]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	4b34      	ldr	r3, [pc, #208]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d208      	bcs.n	8006ff0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fde:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	492e      	ldr	r1, [pc, #184]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d010      	beq.n	800701e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007008:	429a      	cmp	r2, r3
 800700a:	d208      	bcs.n	800701e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	4922      	ldr	r1, [pc, #136]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800701a:	4313      	orrs	r3, r2
 800701c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007036:	429a      	cmp	r2, r3
 8007038:	d208      	bcs.n	800704c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	4917      	ldr	r1, [pc, #92]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007048:	4313      	orrs	r3, r2
 800704a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800704c:	f000 f834 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007050:	4602      	mov	r2, r0
 8007052:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	4912      	ldr	r1, [pc, #72]	; (80070a8 <HAL_RCC_ClockConfig+0x35c>)
 800705e:	5ccb      	ldrb	r3, [r1, r3]
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	4a0d      	ldr	r2, [pc, #52]	; (80070a8 <HAL_RCC_ClockConfig+0x35c>)
 8007074:	5cd3      	ldrb	r3, [r2, r3]
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <HAL_RCC_ClockConfig+0x360>)
 8007082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007084:	4a0a      	ldr	r2, [pc, #40]	; (80070b0 <HAL_RCC_ClockConfig+0x364>)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_RCC_ClockConfig+0x368>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fa f842 	bl	8001118 <HAL_InitTick>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	0800a1e4 	.word	0x0800a1e4
 80070ac:	24000004 	.word	0x24000004
 80070b0:	24000000 	.word	0x24000000
 80070b4:	24000008 	.word	0x24000008

080070b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	; 0x24
 80070bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070be:	4bb3      	ldr	r3, [pc, #716]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c6:	2b18      	cmp	r3, #24
 80070c8:	f200 8155 	bhi.w	8007376 <HAL_RCC_GetSysClockFreq+0x2be>
 80070cc:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007377 	.word	0x08007377
 80070dc:	08007377 	.word	0x08007377
 80070e0:	08007377 	.word	0x08007377
 80070e4:	08007377 	.word	0x08007377
 80070e8:	08007377 	.word	0x08007377
 80070ec:	08007377 	.word	0x08007377
 80070f0:	08007377 	.word	0x08007377
 80070f4:	0800715f 	.word	0x0800715f
 80070f8:	08007377 	.word	0x08007377
 80070fc:	08007377 	.word	0x08007377
 8007100:	08007377 	.word	0x08007377
 8007104:	08007377 	.word	0x08007377
 8007108:	08007377 	.word	0x08007377
 800710c:	08007377 	.word	0x08007377
 8007110:	08007377 	.word	0x08007377
 8007114:	08007165 	.word	0x08007165
 8007118:	08007377 	.word	0x08007377
 800711c:	08007377 	.word	0x08007377
 8007120:	08007377 	.word	0x08007377
 8007124:	08007377 	.word	0x08007377
 8007128:	08007377 	.word	0x08007377
 800712c:	08007377 	.word	0x08007377
 8007130:	08007377 	.word	0x08007377
 8007134:	0800716b 	.word	0x0800716b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007138:	4b94      	ldr	r3, [pc, #592]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007144:	4b91      	ldr	r3, [pc, #580]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	4a90      	ldr	r2, [pc, #576]	; (8007390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
 8007154:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007156:	e111      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007158:	4b8d      	ldr	r3, [pc, #564]	; (8007390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800715a:	61bb      	str	r3, [r7, #24]
    break;
 800715c:	e10e      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800715e:	4b8d      	ldr	r3, [pc, #564]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007160:	61bb      	str	r3, [r7, #24]
    break;
 8007162:	e10b      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007164:	4b8c      	ldr	r3, [pc, #560]	; (8007398 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007166:	61bb      	str	r3, [r7, #24]
    break;
 8007168:	e108      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800716a:	4b88      	ldr	r3, [pc, #544]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007174:	4b85      	ldr	r3, [pc, #532]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	091b      	lsrs	r3, r3, #4
 800717a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800717e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007180:	4b82      	ldr	r3, [pc, #520]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800718a:	4b80      	ldr	r3, [pc, #512]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80e1 	beq.w	8007370 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f000 8083 	beq.w	80072bc <HAL_RCC_GetSysClockFreq+0x204>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f200 80a1 	bhi.w	8007300 <HAL_RCC_GetSysClockFreq+0x248>
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x114>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d056      	beq.n	8007278 <HAL_RCC_GetSysClockFreq+0x1c0>
 80071ca:	e099      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071cc:	4b6f      	ldr	r3, [pc, #444]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02d      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071d8:	4b6c      	ldr	r3, [pc, #432]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	08db      	lsrs	r3, r3, #3
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	4a6b      	ldr	r2, [pc, #428]	; (8007390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
 80071e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b62      	ldr	r3, [pc, #392]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a02 	vldr	s12, [r7, #8]
 8007216:	eddf 5a61 	vldr	s11, [pc, #388]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007232:	e087      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b51      	ldr	r3, [pc, #324]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a02 	vldr	s12, [r7, #8]
 800725a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007276:	e065      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b40      	ldr	r3, [pc, #256]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a02 	vldr	s12, [r7, #8]
 800729e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ba:	e043      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80072ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072de:	ed97 6a02 	vldr	s12, [r7, #8]
 80072e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fe:	e021      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800730e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007312:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007322:	ed97 6a02 	vldr	s12, [r7, #8]
 8007326:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 800732a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007342:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007344:	4b11      	ldr	r3, [pc, #68]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	0a5b      	lsrs	r3, r3, #9
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	3301      	adds	r3, #1
 8007350:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800735c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007368:	ee17 3a90 	vmov	r3, s15
 800736c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800736e:	e005      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	61bb      	str	r3, [r7, #24]
    break;
 8007374:	e002      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007378:	61bb      	str	r3, [r7, #24]
    break;
 800737a:	bf00      	nop
  }

  return sysclockfreq;
 800737c:	69bb      	ldr	r3, [r7, #24]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3724      	adds	r7, #36	; 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	58024400 	.word	0x58024400
 8007390:	03d09000 	.word	0x03d09000
 8007394:	003d0900 	.word	0x003d0900
 8007398:	007a1200 	.word	0x007a1200
 800739c:	46000000 	.word	0x46000000
 80073a0:	4c742400 	.word	0x4c742400
 80073a4:	4a742400 	.word	0x4a742400
 80073a8:	4af42400 	.word	0x4af42400

080073ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073b2:	f7ff fe81 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80073b6:	4602      	mov	r2, r0
 80073b8:	4b10      	ldr	r3, [pc, #64]	; (80073fc <HAL_RCC_GetHCLKFreq+0x50>)
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	490f      	ldr	r1, [pc, #60]	; (8007400 <HAL_RCC_GetHCLKFreq+0x54>)
 80073c4:	5ccb      	ldrb	r3, [r1, r3]
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	fa22 f303 	lsr.w	r3, r2, r3
 80073ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <HAL_RCC_GetHCLKFreq+0x50>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <HAL_RCC_GetHCLKFreq+0x54>)
 80073da:	5cd3      	ldrb	r3, [r2, r3]
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	fa22 f303 	lsr.w	r3, r2, r3
 80073e6:	4a07      	ldr	r2, [pc, #28]	; (8007404 <HAL_RCC_GetHCLKFreq+0x58>)
 80073e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073ea:	4a07      	ldr	r2, [pc, #28]	; (8007408 <HAL_RCC_GetHCLKFreq+0x5c>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <HAL_RCC_GetHCLKFreq+0x58>)
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	58024400 	.word	0x58024400
 8007400:	0800a1e4 	.word	0x0800a1e4
 8007404:	24000004 	.word	0x24000004
 8007408:	24000000 	.word	0x24000000

0800740c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007414:	2300      	movs	r3, #0
 8007416:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007418:	2300      	movs	r3, #0
 800741a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d03f      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007430:	d02a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007432:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007436:	d824      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800743c:	d018      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800743e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007442:	d81e      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744c:	d007      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800744e:	e018      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007450:	4ba3      	ldr	r3, [pc, #652]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4aa2      	ldr	r2, [pc, #648]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800745c:	e015      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3304      	adds	r3, #4
 8007462:	2102      	movs	r1, #2
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fff9 	bl	800945c <RCCEx_PLL2_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800746e:	e00c      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3324      	adds	r3, #36	; 0x24
 8007474:	2102      	movs	r1, #2
 8007476:	4618      	mov	r0, r3
 8007478:	f002 f8a2 	bl	80095c0 <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007480:	e003      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	75fb      	strb	r3, [r7, #23]
      break;
 8007486:	e000      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007490:	4b93      	ldr	r3, [pc, #588]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800749c:	4990      	ldr	r1, [pc, #576]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	650b      	str	r3, [r1, #80]	; 0x50
 80074a2:	e001      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d03d      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d826      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074e7 	.word	0x080074e7
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	08007511 	.word	0x08007511
 80074d4:	08007511 	.word	0x08007511
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d8:	4b81      	ldr	r3, [pc, #516]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a80      	ldr	r2, [pc, #512]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074e4:	e015      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 ffb5 	bl	800945c <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074f6:	e00c      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3324      	adds	r3, #36	; 0x24
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 f85e 	bl	80095c0 <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007508:	e003      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	75fb      	strb	r3, [r7, #23]
      break;
 800750e:	e000      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007518:	4b71      	ldr	r3, [pc, #452]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751c:	f023 0207 	bic.w	r2, r3, #7
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007524:	496e      	ldr	r1, [pc, #440]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007526:	4313      	orrs	r3, r2
 8007528:	650b      	str	r3, [r1, #80]	; 0x50
 800752a:	e001      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007538:	2b00      	cmp	r3, #0
 800753a:	d042      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007544:	d02b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800754a:	d825      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800754c:	2bc0      	cmp	r3, #192	; 0xc0
 800754e:	d028      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007550:	2bc0      	cmp	r3, #192	; 0xc0
 8007552:	d821      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007554:	2b80      	cmp	r3, #128	; 0x80
 8007556:	d016      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007558:	2b80      	cmp	r3, #128	; 0x80
 800755a:	d81d      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d007      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007564:	e018      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007566:	4b5e      	ldr	r3, [pc, #376]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a5d      	ldr	r2, [pc, #372]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800756c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007572:	e017      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f001 ff6e 	bl	800945c <RCCEx_PLL2_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007584:	e00e      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3324      	adds	r3, #36	; 0x24
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f002 f817 	bl	80095c0 <RCCEx_PLL3_Config>
 8007592:	4603      	mov	r3, r0
 8007594:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007596:	e005      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	75fb      	strb	r3, [r7, #23]
      break;
 800759c:	e002      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80075a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075aa:	4b4d      	ldr	r3, [pc, #308]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	494a      	ldr	r1, [pc, #296]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	650b      	str	r3, [r1, #80]	; 0x50
 80075bc:	e001      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d049      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075d8:	d030      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80075da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075de:	d82a      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075e4:	d02c      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80075e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075ea:	d824      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075f0:	d018      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80075f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075f6:	d81e      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80075fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007600:	d007      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007602:	e018      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007604:	4b36      	ldr	r3, [pc, #216]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a35      	ldr	r2, [pc, #212]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800760a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800760e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007610:	e017      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3304      	adds	r3, #4
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f001 ff1f 	bl	800945c <RCCEx_PLL2_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007622:	e00e      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3324      	adds	r3, #36	; 0x24
 8007628:	2100      	movs	r1, #0
 800762a:	4618      	mov	r0, r3
 800762c:	f001 ffc8 	bl	80095c0 <RCCEx_PLL3_Config>
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007634:	e005      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
      break;
 800763a:	e002      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007648:	4b25      	ldr	r3, [pc, #148]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800764a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007656:	4922      	ldr	r1, [pc, #136]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007658:	4313      	orrs	r3, r2
 800765a:	658b      	str	r3, [r1, #88]	; 0x58
 800765c:	e001      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766a:	2b00      	cmp	r3, #0
 800766c:	d04b      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007678:	d030      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800767a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800767e:	d82a      	bhi.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007684:	d02e      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007686:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800768a:	d824      	bhi.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800768c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007690:	d018      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007696:	d81e      	bhi.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800769c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076a0:	d007      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80076a2:	e018      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a4:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076b0:	e019      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3304      	adds	r3, #4
 80076b6:	2100      	movs	r1, #0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 fecf 	bl	800945c <RCCEx_PLL2_Config>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076c2:	e010      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3324      	adds	r3, #36	; 0x24
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 ff78 	bl	80095c0 <RCCEx_PLL3_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076d4:	e007      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	75fb      	strb	r3, [r7, #23]
      break;
 80076da:	e004      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80076dc:	bf00      	nop
 80076de:	e002      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80076e0:	58024400 	.word	0x58024400
      break;
 80076e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076ec:	4b99      	ldr	r3, [pc, #612]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076fa:	4996      	ldr	r1, [pc, #600]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007700:	e001      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d032      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007716:	2b30      	cmp	r3, #48	; 0x30
 8007718:	d01c      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800771a:	2b30      	cmp	r3, #48	; 0x30
 800771c:	d817      	bhi.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800771e:	2b20      	cmp	r3, #32
 8007720:	d00c      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007722:	2b20      	cmp	r3, #32
 8007724:	d813      	bhi.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800772a:	2b10      	cmp	r3, #16
 800772c:	d10f      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772e:	4b89      	ldr	r3, [pc, #548]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	4a88      	ldr	r2, [pc, #544]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800773a:	e00e      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	2102      	movs	r1, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fe8a 	bl	800945c <RCCEx_PLL2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800774c:	e005      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	75fb      	strb	r3, [r7, #23]
      break;
 8007752:	e002      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007760:	4b7c      	ldr	r3, [pc, #496]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776c:	4979      	ldr	r1, [pc, #484]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800776e:	4313      	orrs	r3, r2
 8007770:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007772:	e001      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d047      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800778c:	d030      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800778e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007792:	d82a      	bhi.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007794:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007798:	d02c      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800779a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800779e:	d824      	bhi.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80077a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a4:	d018      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80077a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077aa:	d81e      	bhi.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d007      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80077b6:	e018      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b8:	4b66      	ldr	r3, [pc, #408]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a65      	ldr	r2, [pc, #404]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077c4:	e017      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3304      	adds	r3, #4
 80077ca:	2100      	movs	r1, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fe45 	bl	800945c <RCCEx_PLL2_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077d6:	e00e      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	2100      	movs	r1, #0
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 feee 	bl	80095c0 <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077e8:	e005      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
      break;
 80077ee:	e002      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80077f0:	bf00      	nop
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80077f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077fc:	4b55      	ldr	r3, [pc, #340]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007808:	4952      	ldr	r1, [pc, #328]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800780a:	4313      	orrs	r3, r2
 800780c:	650b      	str	r3, [r1, #80]	; 0x50
 800780e:	e001      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d049      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007828:	d02e      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800782a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800782e:	d828      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007834:	d02a      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800783a:	d822      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800783c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007840:	d026      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007846:	d81c      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800784c:	d010      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800784e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007852:	d816      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01d      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785c:	d111      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3304      	adds	r3, #4
 8007862:	2101      	movs	r1, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fdf9 	bl	800945c <RCCEx_PLL2_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800786e:	e012      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3324      	adds	r3, #36	; 0x24
 8007874:	2101      	movs	r1, #1
 8007876:	4618      	mov	r0, r3
 8007878:	f001 fea2 	bl	80095c0 <RCCEx_PLL3_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007880:	e009      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
      break;
 8007886:	e006      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007888:	bf00      	nop
 800788a:	e004      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800788c:	bf00      	nop
 800788e:	e002      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007890:	bf00      	nop
 8007892:	e000      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800789e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a8:	492a      	ldr	r1, [pc, #168]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	650b      	str	r3, [r1, #80]	; 0x50
 80078ae:	e001      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d04d      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ca:	d02e      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80078cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078d0:	d828      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80078d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d6:	d02a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d822      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80078de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e2:	d026      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80078e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e8:	d81c      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ee:	d010      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80078f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f4:	d816      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01d      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80078fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fe:	d111      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	2101      	movs	r1, #1
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fda8 	bl	800945c <RCCEx_PLL2_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007910:	e012      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3324      	adds	r3, #36	; 0x24
 8007916:	2101      	movs	r1, #1
 8007918:	4618      	mov	r0, r3
 800791a:	f001 fe51 	bl	80095c0 <RCCEx_PLL3_Config>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007922:	e009      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
      break;
 8007928:	e006      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800792a:	bf00      	nop
 800792c:	e004      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800792e:	bf00      	nop
 8007930:	e002      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007932:	bf00      	nop
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10c      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007942:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800794c:	4901      	ldr	r1, [pc, #4]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800794e:	4313      	orrs	r3, r2
 8007950:	658b      	str	r3, [r1, #88]	; 0x58
 8007952:	e003      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d02f      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007970:	d00e      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007976:	d814      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d015      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800797c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007980:	d10f      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007982:	4baf      	ldr	r3, [pc, #700]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	4aae      	ldr	r2, [pc, #696]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800798e:	e00c      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	2101      	movs	r1, #1
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fd60 	bl	800945c <RCCEx_PLL2_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079a0:	e003      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	75fb      	strb	r3, [r7, #23]
      break;
 80079a6:	e000      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80079a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079b0:	4ba3      	ldr	r3, [pc, #652]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079bc:	49a0      	ldr	r1, [pc, #640]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	650b      	str	r3, [r1, #80]	; 0x50
 80079c2:	e001      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d032      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d81b      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a1b 	.word	0x08007a1b
 80079e8:	080079f5 	.word	0x080079f5
 80079ec:	08007a03 	.word	0x08007a03
 80079f0:	08007a1b 	.word	0x08007a1b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b92      	ldr	r3, [pc, #584]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a91      	ldr	r2, [pc, #580]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a00:	e00c      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2102      	movs	r1, #2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f001 fd27 	bl	800945c <RCCEx_PLL2_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a12:	e003      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	75fb      	strb	r3, [r7, #23]
      break;
 8007a18:	e000      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a22:	4b87      	ldr	r3, [pc, #540]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a26:	f023 0203 	bic.w	r2, r3, #3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	4984      	ldr	r1, [pc, #528]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a34:	e001      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8086 	beq.w	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a48:	4b7e      	ldr	r3, [pc, #504]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a7d      	ldr	r2, [pc, #500]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a54:	f7f9 fbaa 	bl	80011ac <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5a:	e009      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a5c:	f7f9 fba6 	bl	80011ac <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b64      	cmp	r3, #100	; 0x64
 8007a68:	d902      	bls.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	75fb      	strb	r3, [r7, #23]
        break;
 8007a6e:	e005      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a70:	4b74      	ldr	r3, [pc, #464]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0ef      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d166      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a82:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a8c:	4053      	eors	r3, r2
 8007a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d013      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a96:	4b6a      	ldr	r3, [pc, #424]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aa0:	4b67      	ldr	r3, [pc, #412]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	4a66      	ldr	r2, [pc, #408]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aaa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aac:	4b64      	ldr	r3, [pc, #400]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	4a63      	ldr	r2, [pc, #396]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ab8:	4a61      	ldr	r2, [pc, #388]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac8:	d115      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aca:	f7f9 fb6f 	bl	80011ac <HAL_GetTick>
 8007ace:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ad0:	e00b      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad2:	f7f9 fb6b 	bl	80011ac <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d902      	bls.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ae8:	e005      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aea:	4b55      	ldr	r3, [pc, #340]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0ed      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d126      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0a:	d10d      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007b0c:	4b4c      	ldr	r3, [pc, #304]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b1a:	0919      	lsrs	r1, r3, #4
 8007b1c:	4b4a      	ldr	r3, [pc, #296]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007b1e:	400b      	ands	r3, r1
 8007b20:	4947      	ldr	r1, [pc, #284]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	610b      	str	r3, [r1, #16]
 8007b26:	e005      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007b28:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	4a44      	ldr	r2, [pc, #272]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b32:	6113      	str	r3, [r2, #16]
 8007b34:	4b42      	ldr	r3, [pc, #264]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b42:	493f      	ldr	r1, [pc, #252]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	670b      	str	r3, [r1, #112]	; 0x70
 8007b48:	e004      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	75bb      	strb	r3, [r7, #22]
 8007b4e:	e001      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8085 	beq.w	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b66:	2b28      	cmp	r3, #40	; 0x28
 8007b68:	d866      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007c4d 	.word	0x08007c4d
 8007b74:	08007c39 	.word	0x08007c39
 8007b78:	08007c39 	.word	0x08007c39
 8007b7c:	08007c39 	.word	0x08007c39
 8007b80:	08007c39 	.word	0x08007c39
 8007b84:	08007c39 	.word	0x08007c39
 8007b88:	08007c39 	.word	0x08007c39
 8007b8c:	08007c39 	.word	0x08007c39
 8007b90:	08007c15 	.word	0x08007c15
 8007b94:	08007c39 	.word	0x08007c39
 8007b98:	08007c39 	.word	0x08007c39
 8007b9c:	08007c39 	.word	0x08007c39
 8007ba0:	08007c39 	.word	0x08007c39
 8007ba4:	08007c39 	.word	0x08007c39
 8007ba8:	08007c39 	.word	0x08007c39
 8007bac:	08007c39 	.word	0x08007c39
 8007bb0:	08007c27 	.word	0x08007c27
 8007bb4:	08007c39 	.word	0x08007c39
 8007bb8:	08007c39 	.word	0x08007c39
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c39 	.word	0x08007c39
 8007bc4:	08007c39 	.word	0x08007c39
 8007bc8:	08007c39 	.word	0x08007c39
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c39 	.word	0x08007c39
 8007bdc:	08007c39 	.word	0x08007c39
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c39 	.word	0x08007c39
 8007bec:	08007c39 	.word	0x08007c39
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c39 	.word	0x08007c39
 8007bf8:	08007c39 	.word	0x08007c39
 8007bfc:	08007c39 	.word	0x08007c39
 8007c00:	08007c39 	.word	0x08007c39
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c39 	.word	0x08007c39
 8007c0c:	08007c39 	.word	0x08007c39
 8007c10:	08007c4d 	.word	0x08007c4d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3304      	adds	r3, #4
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fc1e 	bl	800945c <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c24:	e013      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3324      	adds	r3, #36	; 0x24
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 fcc7 	bl	80095c0 <RCCEx_PLL3_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c36:	e00a      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c3c:	e007      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007c3e:	bf00      	nop
 8007c40:	58024400 	.word	0x58024400
 8007c44:	58024800 	.word	0x58024800
 8007c48:	00ffffcf 	.word	0x00ffffcf
      break;
 8007c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c54:	4b96      	ldr	r3, [pc, #600]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c60:	4993      	ldr	r1, [pc, #588]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	654b      	str	r3, [r1, #84]	; 0x54
 8007c66:	e001      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d038      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d821      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007c80:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007ccb 	.word	0x08007ccb
 8007c8c:	08007ca1 	.word	0x08007ca1
 8007c90:	08007cb3 	.word	0x08007cb3
 8007c94:	08007ccb 	.word	0x08007ccb
 8007c98:	08007ccb 	.word	0x08007ccb
 8007c9c:	08007ccb 	.word	0x08007ccb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 fbd8 	bl	800945c <RCCEx_PLL2_Config>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007cb0:	e00c      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3324      	adds	r3, #36	; 0x24
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 fc81 	bl	80095c0 <RCCEx_PLL3_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007cc2:	e003      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc8:	e000      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cd2:	4b77      	ldr	r3, [pc, #476]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	f023 0207 	bic.w	r2, r3, #7
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cde:	4974      	ldr	r1, [pc, #464]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ce4:	e001      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d03a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfc:	2b05      	cmp	r3, #5
 8007cfe:	d821      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d4b 	.word	0x08007d4b
 8007d0c:	08007d21 	.word	0x08007d21
 8007d10:	08007d33 	.word	0x08007d33
 8007d14:	08007d4b 	.word	0x08007d4b
 8007d18:	08007d4b 	.word	0x08007d4b
 8007d1c:	08007d4b 	.word	0x08007d4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	2101      	movs	r1, #1
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 fb98 	bl	800945c <RCCEx_PLL2_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d30:	e00c      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3324      	adds	r3, #36	; 0x24
 8007d36:	2101      	movs	r1, #1
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fc41 	bl	80095c0 <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
      break;
 8007d48:	e000      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d52:	4b57      	ldr	r3, [pc, #348]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	f023 0207 	bic.w	r2, r3, #7
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	4953      	ldr	r1, [pc, #332]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	658b      	str	r3, [r1, #88]	; 0x58
 8007d66:	e001      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d04b      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d82:	d02e      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d88:	d828      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d02a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d94:	d822      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d9a:	d026      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007d9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007da0:	d81c      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da6:	d010      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dac:	d816      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d01d      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db6:	d111      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fb4c 	bl	800945c <RCCEx_PLL2_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007dc8:	e012      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3324      	adds	r3, #36	; 0x24
 8007dce:	2102      	movs	r1, #2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 fbf5 	bl	80095c0 <RCCEx_PLL3_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007dda:	e009      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	e006      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007de2:	bf00      	nop
 8007de4:	e004      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df6:	4b2e      	ldr	r3, [pc, #184]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e04:	492a      	ldr	r1, [pc, #168]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	654b      	str	r3, [r1, #84]	; 0x54
 8007e0a:	e001      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d04d      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e26:	d02e      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007e28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e2c:	d828      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	d02a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e38:	d822      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e3e:	d026      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e44:	d81c      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e4a:	d010      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e50:	d816      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d01d      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	d111      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fafa 	bl	800945c <RCCEx_PLL2_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e6c:	e012      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3324      	adds	r3, #36	; 0x24
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fba3 	bl	80095c0 <RCCEx_PLL3_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e7e:	e009      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	75fb      	strb	r3, [r7, #23]
      break;
 8007e84:	e006      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e86:	bf00      	nop
 8007e88:	e004      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e8a:	bf00      	nop
 8007e8c:	e002      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e8e:	bf00      	nop
 8007e90:	e000      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10c      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ea8:	4901      	ldr	r1, [pc, #4]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	658b      	str	r3, [r1, #88]	; 0x58
 8007eae:	e003      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007eb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d04b      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007eca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ece:	d02e      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007ed0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ed4:	d828      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eda:	d02a      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee0:	d822      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007ee2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ee6:	d026      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007ee8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007eec:	d81c      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef2:	d010      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef8:	d816      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01d      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	d111      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 faa6 	bl	800945c <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f14:	e012      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3324      	adds	r3, #36	; 0x24
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fb4f 	bl	80095c0 <RCCEx_PLL3_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f26:	e009      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2c:	e006      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e004      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f42:	4b9d      	ldr	r3, [pc, #628]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f50:	4999      	ldr	r1, [pc, #612]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	658b      	str	r3, [r1, #88]	; 0x58
 8007f56:	e001      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01a      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	d10a      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3324      	adds	r3, #36	; 0x24
 8007f78:	2102      	movs	r1, #2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fb20 	bl	80095c0 <RCCEx_PLL3_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f8a:	4b8b      	ldr	r3, [pc, #556]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f98:	4987      	ldr	r1, [pc, #540]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0310 	and.w	r3, r3, #16
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01a      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb4:	d10a      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3324      	adds	r3, #36	; 0x24
 8007fba:	2102      	movs	r1, #2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 faff 	bl	80095c0 <RCCEx_PLL3_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fcc:	4b7a      	ldr	r3, [pc, #488]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fda:	4977      	ldr	r1, [pc, #476]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d034      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ff6:	d01d      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ffc:	d817      	bhi.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008006:	d009      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008008:	e011      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3304      	adds	r3, #4
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f001 fa23 	bl	800945c <RCCEx_PLL2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800801a:	e00c      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3324      	adds	r3, #36	; 0x24
 8008020:	2102      	movs	r1, #2
 8008022:	4618      	mov	r0, r3
 8008024:	f001 facc 	bl	80095c0 <RCCEx_PLL3_Config>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	75fb      	strb	r3, [r7, #23]
      break;
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800803c:	4b5e      	ldr	r3, [pc, #376]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800803e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800804a:	495b      	ldr	r1, [pc, #364]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800804c:	4313      	orrs	r3, r2
 800804e:	658b      	str	r3, [r1, #88]	; 0x58
 8008050:	e001      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d033      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008068:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800806c:	d01c      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800806e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008072:	d816      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008078:	d003      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800807a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800807e:	d007      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008080:	e00f      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008082:	4b4d      	ldr	r3, [pc, #308]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	4a4c      	ldr	r2, [pc, #304]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800808c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800808e:	e00c      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3324      	adds	r3, #36	; 0x24
 8008094:	2101      	movs	r1, #1
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fa92 	bl	80095c0 <RCCEx_PLL3_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80080a0:	e003      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
      break;
 80080a6:	e000      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80080a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080b0:	4b41      	ldr	r3, [pc, #260]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080be:	493e      	ldr	r1, [pc, #248]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	654b      	str	r3, [r1, #84]	; 0x54
 80080c4:	e001      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d029      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80080de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e2:	d007      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80080e4:	e00f      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e6:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ea:	4a33      	ldr	r2, [pc, #204]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080f2:	e00b      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	2102      	movs	r1, #2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 f9ae 	bl	800945c <RCCEx_PLL2_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008104:	e002      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]
      break;
 800810a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008112:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811e:	4926      	ldr	r1, [pc, #152]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008120:	4313      	orrs	r3, r2
 8008122:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008124:	e001      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3324      	adds	r3, #36	; 0x24
 800813a:	2102      	movs	r1, #2
 800813c:	4618      	mov	r0, r3
 800813e:	f001 fa3f 	bl	80095c0 <RCCEx_PLL3_Config>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d033      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800815c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008160:	d017      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008166:	d811      	bhi.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816c:	d013      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008172:	d80b      	bhi.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d010      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817c:	d106      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817e:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	4a0d      	ldr	r2, [pc, #52]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800818a:	e007      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	e004      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008192:	bf00      	nop
 8008194:	e002      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800819a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10c      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ae:	4902      	ldr	r1, [pc, #8]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	654b      	str	r3, [r1, #84]	; 0x54
 80081b4:	e004      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80081b6:	bf00      	nop
 80081b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081cc:	4b31      	ldr	r3, [pc, #196]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	492e      	ldr	r1, [pc, #184]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80081ea:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081f8:	4926      	ldr	r1, [pc, #152]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d008      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800820a:	4b22      	ldr	r3, [pc, #136]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008216:	491f      	ldr	r1, [pc, #124]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008218:	4313      	orrs	r3, r2
 800821a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00d      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	4a19      	ldr	r2, [pc, #100]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800822e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008232:	6113      	str	r3, [r2, #16]
 8008234:	4b17      	ldr	r3, [pc, #92]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800823e:	4915      	ldr	r1, [pc, #84]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008240:	4313      	orrs	r3, r2
 8008242:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	da08      	bge.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800824e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008250:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008258:	490e      	ldr	r1, [pc, #56]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800825a:	4313      	orrs	r3, r2
 800825c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008278:	4906      	ldr	r1, [pc, #24]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800827a:	4313      	orrs	r3, r2
 800827c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800827e:	7dbb      	ldrb	r3, [r7, #22]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e000      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	58024400 	.word	0x58024400

08008298 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b090      	sub	sp, #64	; 0x40
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a6:	f040 8095 	bne.w	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80082aa:	4b97      	ldr	r3, [pc, #604]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	f200 8088 	bhi.w	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082d9 	.word	0x080082d9
 80082c8:	08008301 	.word	0x08008301
 80082cc:	08008329 	.word	0x08008329
 80082d0:	080083c5 	.word	0x080083c5
 80082d4:	08008351 	.word	0x08008351
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082d8:	4b8b      	ldr	r3, [pc, #556]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e4:	d108      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff64 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082f4:	f000 bc94 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fc:	f000 bc90 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008300:	4b81      	ldr	r3, [pc, #516]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800830c:	d108      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800830e:	f107 0318 	add.w	r3, r7, #24
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fca8 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800831c:	f000 bc80 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008324:	f000 bc7c 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008328:	4b77      	ldr	r3, [pc, #476]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008334:	d108      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008336:	f107 030c 	add.w	r3, r7, #12
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fde8 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008344:	f000 bc6c 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834c:	f000 bc68 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008350:	4b6d      	ldr	r3, [pc, #436]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008358:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800835a:	4b6b      	ldr	r3, [pc, #428]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b04      	cmp	r3, #4
 8008364:	d10c      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800836c:	4b66      	ldr	r3, [pc, #408]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	4a65      	ldr	r2, [pc, #404]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837e:	e01f      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008380:	4b61      	ldr	r3, [pc, #388]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838c:	d106      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008394:	d102      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008396:	4b5e      	ldr	r3, [pc, #376]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839a:	e011      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800839c:	4b5a      	ldr	r3, [pc, #360]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a8:	d106      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80083b2:	4b58      	ldr	r3, [pc, #352]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b6:	e003      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80083bc:	f000 bc30 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80083c0:	f000 bc2e 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083c4:	4b54      	ldr	r3, [pc, #336]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c8:	f000 bc2a 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d0:	f000 bc26 	b.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083da:	f040 809f 	bne.w	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80083de:	4b4a      	ldr	r3, [pc, #296]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80083e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ee:	d04d      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f6:	f200 8084 	bhi.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2bc0      	cmp	r3, #192	; 0xc0
 80083fe:	d07d      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	2bc0      	cmp	r3, #192	; 0xc0
 8008404:	d87d      	bhi.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d02d      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d877      	bhi.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d012      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800841e:	e070      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008420:	4b39      	ldr	r3, [pc, #228]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800842e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fec0 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800843c:	e3f0      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008442:	e3ed      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008444:	4b30      	ldr	r3, [pc, #192]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800844c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008452:	f107 0318 	add.w	r3, r7, #24
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fc06 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008460:	e3de      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008466:	e3db      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008468:	4b27      	ldr	r3, [pc, #156]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008474:	d107      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fd48 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008484:	e3cc      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848a:	e3c9      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800848c:	4b1e      	ldr	r3, [pc, #120]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008494:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008496:	4b1c      	ldr	r3, [pc, #112]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d10c      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084a8:	4b17      	ldr	r3, [pc, #92]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	08db      	lsrs	r3, r3, #3
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	4a16      	ldr	r2, [pc, #88]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80084b4:	fa22 f303 	lsr.w	r3, r2, r3
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ba:	e01e      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084bc:	4b12      	ldr	r3, [pc, #72]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c8:	d106      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084d0:	d102      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d6:	e010      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084d8:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084e4:	d106      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ec:	d102      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f2:	e002      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80084f8:	e392      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80084fa:	e391      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084fc:	4b06      	ldr	r3, [pc, #24]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008500:	e38e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008506:	e38b      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008508:	58024400 	.word	0x58024400
 800850c:	03d09000 	.word	0x03d09000
 8008510:	003d0900 	.word	0x003d0900
 8008514:	007a1200 	.word	0x007a1200
 8008518:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008522:	f040 809c 	bne.w	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008526:	4b9d      	ldr	r3, [pc, #628]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800852e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008536:	d054      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800853e:	f200 808b 	bhi.w	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008548:	f000 8083 	beq.w	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008552:	f200 8081 	bhi.w	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800855c:	d02f      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008564:	d878      	bhi.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008572:	d012      	beq.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008574:	e070      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008576:	4b89      	ldr	r3, [pc, #548]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008582:	d107      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fe15 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008592:	e345      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008598:	e342      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800859a:	4b80      	ldr	r3, [pc, #512]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a6:	d107      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a8:	f107 0318 	add.w	r3, r7, #24
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fb5b 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085b6:	e333      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085bc:	e330      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085be:	4b77      	ldr	r3, [pc, #476]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ca:	d107      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fc9d 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085da:	e321      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e0:	e31e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085e2:	4b6e      	ldr	r3, [pc, #440]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085ec:	4b6b      	ldr	r3, [pc, #428]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d10c      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085fe:	4b67      	ldr	r3, [pc, #412]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	08db      	lsrs	r3, r3, #3
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	4a65      	ldr	r2, [pc, #404]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800860a:	fa22 f303 	lsr.w	r3, r2, r3
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008610:	e01e      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008612:	4b62      	ldr	r3, [pc, #392]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800861e:	d106      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008626:	d102      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008628:	4b5e      	ldr	r3, [pc, #376]	; (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800862c:	e010      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800862e:	4b5b      	ldr	r3, [pc, #364]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800863a:	d106      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008642:	d102      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008644:	4b58      	ldr	r3, [pc, #352]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008648:	e002      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800864e:	e2e7      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008650:	e2e6      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008652:	4b56      	ldr	r3, [pc, #344]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008656:	e2e3      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800865c:	e2e0      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008664:	f040 80a7 	bne.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008668:	4b4c      	ldr	r3, [pc, #304]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800866a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008670:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008678:	d055      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008680:	f200 8096 	bhi.w	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800868a:	f000 8084 	beq.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008694:	f200 808c 	bhi.w	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800869e:	d030      	beq.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a6:	f200 8083 	bhi.w	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b6:	d012      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80086b8:	e07a      	b.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ba:	4b38      	ldr	r3, [pc, #224]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c6:	d107      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fd73 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086d6:	e2a3      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086dc:	e2a0      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086de:	4b2f      	ldr	r3, [pc, #188]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ea:	d107      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fab9 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80086fa:	e291      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008700:	e28e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008702:	4b26      	ldr	r3, [pc, #152]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800870a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870e:	d107      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008710:	f107 030c 	add.w	r3, r7, #12
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fbfb 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800871e:	e27f      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008724:	e27c      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008726:	4b1d      	ldr	r3, [pc, #116]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800872e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008730:	4b1a      	ldr	r3, [pc, #104]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b04      	cmp	r3, #4
 800873a:	d10c      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008742:	4b16      	ldr	r3, [pc, #88]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	4a14      	ldr	r2, [pc, #80]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800874e:	fa22 f303 	lsr.w	r3, r2, r3
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008754:	e01e      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008762:	d106      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800876a:	d102      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008770:	e010      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008772:	4b0a      	ldr	r3, [pc, #40]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800877e:	d106      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008786:	d102      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008792:	e245      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008794:	e244      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800879a:	e241      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800879c:	58024400 	.word	0x58024400
 80087a0:	03d09000 	.word	0x03d09000
 80087a4:	003d0900 	.word	0x003d0900
 80087a8:	007a1200 	.word	0x007a1200
 80087ac:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087b4:	e234      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087bc:	f040 809c 	bne.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80087c0:	4b9b      	ldr	r3, [pc, #620]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80087c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80087c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d0:	d054      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d8:	f200 808b 	bhi.w	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087e2:	f000 8083 	beq.w	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087ec:	f200 8081 	bhi.w	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f6:	d02f      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fe:	d878      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880c:	d012      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800880e:	e070      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008810:	4b87      	ldr	r3, [pc, #540]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800881c:	d107      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800881e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fcc8 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800882c:	e1f8      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008832:	e1f5      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008834:	4b7e      	ldr	r3, [pc, #504]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800883c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008840:	d107      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008842:	f107 0318 	add.w	r3, r7, #24
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fa0e 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008850:	e1e6      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008856:	e1e3      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008858:	4b75      	ldr	r3, [pc, #468]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008864:	d107      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fb50 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008874:	e1d4      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800887a:	e1d1      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800887c:	4b6c      	ldr	r3, [pc, #432]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800887e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008884:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008886:	4b6a      	ldr	r3, [pc, #424]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b04      	cmp	r3, #4
 8008890:	d10c      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008898:	4b65      	ldr	r3, [pc, #404]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	08db      	lsrs	r3, r3, #3
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	4a64      	ldr	r2, [pc, #400]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80088a4:	fa22 f303 	lsr.w	r3, r2, r3
 80088a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088aa:	e01e      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088ac:	4b60      	ldr	r3, [pc, #384]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b8:	d106      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80088ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088c2:	4b5d      	ldr	r3, [pc, #372]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c6:	e010      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088c8:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d4:	d106      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80088d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088dc:	d102      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088de:	4b57      	ldr	r3, [pc, #348]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e2:	e002      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088e8:	e19a      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80088ea:	e199      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088ec:	4b54      	ldr	r3, [pc, #336]	; (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f0:	e196      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f6:	e193      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088fe:	d173      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008900:	4b4b      	ldr	r3, [pc, #300]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008908:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008910:	d02f      	beq.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008918:	d863      	bhi.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	2b00      	cmp	r3, #0
 800891e:	d004      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008926:	d012      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008928:	e05b      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800892a:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008936:	d107      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008938:	f107 0318 	add.w	r3, r7, #24
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f993 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008946:	e16b      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894c:	e168      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800894e:	4b38      	ldr	r3, [pc, #224]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800895a:	d107      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fad5 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800896a:	e159      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008970:	e156      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008972:	4b2f      	ldr	r3, [pc, #188]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800897a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800897c:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b04      	cmp	r3, #4
 8008986:	d10c      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8008988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800898e:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	08db      	lsrs	r3, r3, #3
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	4a26      	ldr	r2, [pc, #152]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a0:	e01e      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ae:	d106      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b6:	d102      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089b8:	4b1f      	ldr	r3, [pc, #124]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089bc:	e010      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089be:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ca:	d106      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80089cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d2:	d102      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d8:	e002      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80089de:	e11f      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80089e0:	e11e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e6:	e11b      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ee:	d13e      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80089f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d004      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a06:	d01d      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008a08:	e02e      	b.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a0a:	4b09      	ldr	r3, [pc, #36]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a16:	d107      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fbcb 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a26:	e0fb      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a2c:	e0f8      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008a2e:	bf00      	nop
 8008a30:	58024400 	.word	0x58024400
 8008a34:	03d09000 	.word	0x03d09000
 8008a38:	003d0900 	.word	0x003d0900
 8008a3c:	007a1200 	.word	0x007a1200
 8008a40:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a44:	4b79      	ldr	r3, [pc, #484]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a50:	d107      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a52:	f107 0318 	add.w	r3, r7, #24
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f906 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a60:	e0de      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a66:	e0db      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6c:	e0d8      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a74:	f040 8085 	bne.w	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008a78:	4b6c      	ldr	r3, [pc, #432]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a88:	d06b      	beq.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a90:	d874      	bhi.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a98:	d056      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa0:	d86c      	bhi.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008aa8:	d03b      	beq.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ab0:	d864      	bhi.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab8:	d021      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac0:	d85c      	bhi.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ace:	d004      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008ad0:	e054      	b.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ad2:	f000 f8b3 	bl	8008c3c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008ad8:	e0a2      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ada:	4b54      	ldr	r3, [pc, #336]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae8:	f107 0318 	add.w	r3, r7, #24
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f8bb 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008af6:	e093      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008afc:	e090      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008afe:	4b4b      	ldr	r3, [pc, #300]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f9fd 	bl	8008f10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b1a:	e081      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b20:	e07e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b22:	4b42      	ldr	r3, [pc, #264]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d109      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b2e:	4b3f      	ldr	r3, [pc, #252]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	08db      	lsrs	r3, r3, #3
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	4a3d      	ldr	r2, [pc, #244]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b40:	e06e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b46:	e06b      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b48:	4b38      	ldr	r3, [pc, #224]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b54:	d102      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8008b56:	4b37      	ldr	r3, [pc, #220]	; (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b5a:	e061      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b60:	e05e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b62:	4b32      	ldr	r3, [pc, #200]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b6e:	d102      	bne.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8008b70:	4b31      	ldr	r3, [pc, #196]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b74:	e054      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7a:	e051      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b80:	e04e      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b88:	d148      	bne.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008b8a:	4b28      	ldr	r3, [pc, #160]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b9a:	d02a      	beq.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba2:	d838      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb0:	d00d      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008bb2:	e030      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bb4:	4b1d      	ldr	r3, [pc, #116]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc0:	d102      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8008bc2:	4b1d      	ldr	r3, [pc, #116]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bc6:	e02b      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bcc:	e028      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bce:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bda:	d107      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fae9 	bl	80091b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bea:	e019      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf0:	e016      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bf2:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bfe:	d107      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c00:	f107 0318 	add.w	r3, r7, #24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f82f 	bl	8008c68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c0e:	e007      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c14:	e004      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c1a:	e001      	b.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3740      	adds	r7, #64	; 0x40
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	03d09000 	.word	0x03d09000
 8008c34:	003d0900 	.word	0x003d0900
 8008c38:	007a1200 	.word	0x007a1200

08008c3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c40:	f7fe fbb4 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 8008c44:	4602      	mov	r2, r0
 8008c46:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	091b      	lsrs	r3, r3, #4
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	4904      	ldr	r1, [pc, #16]	; (8008c64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c52:	5ccb      	ldrb	r3, [r1, r3]
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	58024400 	.word	0x58024400
 8008c64:	0800a1e4 	.word	0x0800a1e4

08008c68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b089      	sub	sp, #36	; 0x24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c70:	4ba1      	ldr	r3, [pc, #644]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008c7a:	4b9f      	ldr	r3, [pc, #636]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	0b1b      	lsrs	r3, r3, #12
 8008c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c86:	4b9c      	ldr	r3, [pc, #624]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	091b      	lsrs	r3, r3, #4
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c92:	4b99      	ldr	r3, [pc, #612]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c96:	08db      	lsrs	r3, r3, #3
 8008c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8111 	beq.w	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	f000 8083 	beq.w	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f200 80a1 	bhi.w	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d056      	beq.n	8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cd2:	e099      	b.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cd4:	4b88      	ldr	r3, [pc, #544]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d02d      	beq.n	8008d3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ce0:	4b85      	ldr	r3, [pc, #532]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	08db      	lsrs	r3, r3, #3
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	4a84      	ldr	r2, [pc, #528]	; (8008efc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0a:	4b7b      	ldr	r3, [pc, #492]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d3a:	e087      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4e:	4b6a      	ldr	r3, [pc, #424]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d7e:	e065      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d92:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dc2:	e043      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd6:	4b48      	ldr	r3, [pc, #288]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e06:	e021      	b.n	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1a:	4b37      	ldr	r3, [pc, #220]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008e4c:	4b2a      	ldr	r3, [pc, #168]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	0a5b      	lsrs	r3, r3, #9
 8008e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e72:	ee17 2a90 	vmov	r2, s15
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008e7a:	4b1f      	ldr	r3, [pc, #124]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	0c1b      	lsrs	r3, r3, #16
 8008e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea0:	ee17 2a90 	vmov	r2, s15
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008ea8:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	0e1b      	lsrs	r3, r3, #24
 8008eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ece:	ee17 2a90 	vmov	r2, s15
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ed6:	e008      	b.n	8008eea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	609a      	str	r2, [r3, #8]
}
 8008eea:	bf00      	nop
 8008eec:	3724      	adds	r7, #36	; 0x24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	03d09000 	.word	0x03d09000
 8008f00:	46000000 	.word	0x46000000
 8008f04:	4c742400 	.word	0x4c742400
 8008f08:	4a742400 	.word	0x4a742400
 8008f0c:	4af42400 	.word	0x4af42400

08008f10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b089      	sub	sp, #36	; 0x24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f18:	4ba1      	ldr	r3, [pc, #644]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f22:	4b9f      	ldr	r3, [pc, #636]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	0d1b      	lsrs	r3, r3, #20
 8008f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f2e:	4b9c      	ldr	r3, [pc, #624]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f3a:	4b99      	ldr	r3, [pc, #612]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3e:	08db      	lsrs	r3, r3, #3
 8008f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	fb02 f303 	mul.w	r3, r2, r3
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 8111 	beq.w	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f000 8083 	beq.w	800906c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	f200 80a1 	bhi.w	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d056      	beq.n	8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f7a:	e099      	b.n	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f7c:	4b88      	ldr	r3, [pc, #544]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02d      	beq.n	8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f88:	4b85      	ldr	r3, [pc, #532]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	08db      	lsrs	r3, r3, #3
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	4a84      	ldr	r2, [pc, #528]	; (80091a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
 8008f98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b7b      	ldr	r3, [pc, #492]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008fe2:	e087      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80091ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b6a      	ldr	r3, [pc, #424]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a03 	vldr	s12, [r7, #12]
 800900a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009026:	e065      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80091b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b59      	ldr	r3, [pc, #356]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a03 	vldr	s12, [r7, #12]
 800904e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800906a:	e043      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b48      	ldr	r3, [pc, #288]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009092:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090ae:	e021      	b.n	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80091b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c2:	4b37      	ldr	r3, [pc, #220]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80090f4:	4b2a      	ldr	r3, [pc, #168]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	0a5b      	lsrs	r3, r3, #9
 80090fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800910e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911a:	ee17 2a90 	vmov	r2, s15
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009122:	4b1f      	ldr	r3, [pc, #124]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	0c1b      	lsrs	r3, r3, #16
 8009128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912c:	ee07 3a90 	vmov	s15, r3
 8009130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800913c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009148:	ee17 2a90 	vmov	r2, s15
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009150:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	0e1b      	lsrs	r3, r3, #24
 8009156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800916a:	edd7 6a07 	vldr	s13, [r7, #28]
 800916e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009176:	ee17 2a90 	vmov	r2, s15
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800917e:	e008      	b.n	8009192 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	609a      	str	r2, [r3, #8]
}
 8009192:	bf00      	nop
 8009194:	3724      	adds	r7, #36	; 0x24
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
 80091a4:	03d09000 	.word	0x03d09000
 80091a8:	46000000 	.word	0x46000000
 80091ac:	4c742400 	.word	0x4c742400
 80091b0:	4a742400 	.word	0x4a742400
 80091b4:	4af42400 	.word	0x4af42400

080091b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b089      	sub	sp, #36	; 0x24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091c0:	4ba0      	ldr	r3, [pc, #640]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	f003 0303 	and.w	r3, r3, #3
 80091c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80091ca:	4b9e      	ldr	r3, [pc, #632]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	091b      	lsrs	r3, r3, #4
 80091d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091d6:	4b9b      	ldr	r3, [pc, #620]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80091e0:	4b98      	ldr	r3, [pc, #608]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8111 	beq.w	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b02      	cmp	r3, #2
 8009208:	f000 8083 	beq.w	8009312 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2b02      	cmp	r3, #2
 8009210:	f200 80a1 	bhi.w	8009356 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d056      	beq.n	80092ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009220:	e099      	b.n	8009356 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009222:	4b88      	ldr	r3, [pc, #544]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d02d      	beq.n	800928a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800922e:	4b85      	ldr	r3, [pc, #532]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	08db      	lsrs	r3, r3, #3
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	4a83      	ldr	r2, [pc, #524]	; (8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009258:	4b7a      	ldr	r3, [pc, #488]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009268:	ed97 6a03 	vldr	s12, [r7, #12]
 800926c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009284:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009288:	e087      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009450 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929c:	4b69      	ldr	r3, [pc, #420]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092cc:	e065      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e0:	4b58      	ldr	r3, [pc, #352]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009310:	e043      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009324:	4b47      	ldr	r3, [pc, #284]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009334:	ed97 6a03 	vldr	s12, [r7, #12]
 8009338:	eddf 5a44 	vldr	s11, [pc, #272]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800933c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009350:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009354:	e021      	b.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	ee07 3a90 	vmov	s15, r3
 800935c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009360:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009450 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009368:	4b36      	ldr	r3, [pc, #216]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	ed97 6a03 	vldr	s12, [r7, #12]
 800937c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009394:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009398:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800939a:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	0a5b      	lsrs	r3, r3, #9
 80093a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c0:	ee17 2a90 	vmov	r2, s15
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80093c8:	4b1e      	ldr	r3, [pc, #120]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ee:	ee17 2a90 	vmov	r2, s15
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	0e1b      	lsrs	r3, r3, #24
 80093fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009410:	edd7 6a07 	vldr	s13, [r7, #28]
 8009414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800941c:	ee17 2a90 	vmov	r2, s15
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009424:	e008      	b.n	8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	609a      	str	r2, [r3, #8]
}
 8009438:	bf00      	nop
 800943a:	3724      	adds	r7, #36	; 0x24
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	58024400 	.word	0x58024400
 8009448:	03d09000 	.word	0x03d09000
 800944c:	46000000 	.word	0x46000000
 8009450:	4c742400 	.word	0x4c742400
 8009454:	4a742400 	.word	0x4a742400
 8009458:	4af42400 	.word	0x4af42400

0800945c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800946a:	4b53      	ldr	r3, [pc, #332]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b03      	cmp	r3, #3
 8009474:	d101      	bne.n	800947a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e099      	b.n	80095ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800947a:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a4e      	ldr	r2, [pc, #312]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009480:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009486:	f7f7 fe91 	bl	80011ac <HAL_GetTick>
 800948a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800948c:	e008      	b.n	80094a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800948e:	f7f7 fe8d 	bl	80011ac <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b02      	cmp	r3, #2
 800949a:	d901      	bls.n	80094a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e086      	b.n	80095ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094a0:	4b45      	ldr	r3, [pc, #276]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1f0      	bne.n	800948e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80094ac:	4b42      	ldr	r3, [pc, #264]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	031b      	lsls	r3, r3, #12
 80094ba:	493f      	ldr	r1, [pc, #252]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	628b      	str	r3, [r1, #40]	; 0x28
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	3b01      	subs	r3, #1
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	061b      	lsls	r3, r3, #24
 80094ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094f0:	4931      	ldr	r1, [pc, #196]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094f6:	4b30      	ldr	r3, [pc, #192]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	492d      	ldr	r1, [pc, #180]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009504:	4313      	orrs	r3, r2
 8009506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009508:	4b2b      	ldr	r3, [pc, #172]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f023 0220 	bic.w	r2, r3, #32
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	4928      	ldr	r1, [pc, #160]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009516:	4313      	orrs	r3, r2
 8009518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800951a:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	4a26      	ldr	r2, [pc, #152]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009520:	f023 0310 	bic.w	r3, r3, #16
 8009524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <RCCEx_PLL2_Config+0x160>)
 800952c:	4013      	ands	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	69d2      	ldr	r2, [r2, #28]
 8009532:	00d2      	lsls	r2, r2, #3
 8009534:	4920      	ldr	r1, [pc, #128]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009536:	4313      	orrs	r3, r2
 8009538:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009540:	f043 0310 	orr.w	r3, r3, #16
 8009544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009558:	e00f      	b.n	800957a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d106      	bne.n	800956e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800956a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800956c:	e005      	b.n	800957a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800956e:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a11      	ldr	r2, [pc, #68]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a0e      	ldr	r2, [pc, #56]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 8009580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009586:	f7f7 fe11 	bl	80011ac <HAL_GetTick>
 800958a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800958c:	e008      	b.n	80095a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800958e:	f7f7 fe0d 	bl	80011ac <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e006      	b.n	80095ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <RCCEx_PLL2_Config+0x15c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	58024400 	.word	0x58024400
 80095bc:	ffff0007 	.word	0xffff0007

080095c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ce:	4b53      	ldr	r3, [pc, #332]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d101      	bne.n	80095de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e099      	b.n	8009712 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095de:	4b4f      	ldr	r3, [pc, #316]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a4e      	ldr	r2, [pc, #312]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80095e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ea:	f7f7 fddf 	bl	80011ac <HAL_GetTick>
 80095ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095f0:	e008      	b.n	8009604 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095f2:	f7f7 fddb 	bl	80011ac <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d901      	bls.n	8009604 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e086      	b.n	8009712 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009604:	4b45      	ldr	r3, [pc, #276]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1f0      	bne.n	80095f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009610:	4b42      	ldr	r3, [pc, #264]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	051b      	lsls	r3, r3, #20
 800961e:	493f      	ldr	r1, [pc, #252]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009620:	4313      	orrs	r3, r2
 8009622:	628b      	str	r3, [r1, #40]	; 0x28
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	3b01      	subs	r3, #1
 800962a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	3b01      	subs	r3, #1
 8009634:	025b      	lsls	r3, r3, #9
 8009636:	b29b      	uxth	r3, r3
 8009638:	431a      	orrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	3b01      	subs	r3, #1
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	3b01      	subs	r3, #1
 800964e:	061b      	lsls	r3, r3, #24
 8009650:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009654:	4931      	ldr	r1, [pc, #196]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009656:	4313      	orrs	r3, r2
 8009658:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800965a:	4b30      	ldr	r3, [pc, #192]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	492d      	ldr	r1, [pc, #180]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009668:	4313      	orrs	r3, r2
 800966a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800966c:	4b2b      	ldr	r3, [pc, #172]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	4928      	ldr	r1, [pc, #160]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800967a:	4313      	orrs	r3, r2
 800967c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800967e:	4b27      	ldr	r3, [pc, #156]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	4a26      	ldr	r2, [pc, #152]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800968a:	4b24      	ldr	r3, [pc, #144]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800968c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968e:	4b24      	ldr	r3, [pc, #144]	; (8009720 <RCCEx_PLL3_Config+0x160>)
 8009690:	4013      	ands	r3, r2
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	69d2      	ldr	r2, [r2, #28]
 8009696:	00d2      	lsls	r2, r2, #3
 8009698:	4920      	ldr	r1, [pc, #128]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 800969a:	4313      	orrs	r3, r2
 800969c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	4a1e      	ldr	r2, [pc, #120]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80096b0:	4b1a      	ldr	r3, [pc, #104]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a19      	ldr	r2, [pc, #100]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096bc:	e00f      	b.n	80096de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d106      	bne.n	80096d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80096c4:	4b15      	ldr	r3, [pc, #84]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	4a14      	ldr	r2, [pc, #80]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096d0:	e005      	b.n	80096de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096d2:	4b12      	ldr	r3, [pc, #72]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	4a11      	ldr	r2, [pc, #68]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a0e      	ldr	r2, [pc, #56]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 80096e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ea:	f7f7 fd5f 	bl	80011ac <HAL_GetTick>
 80096ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096f0:	e008      	b.n	8009704 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80096f2:	f7f7 fd5b 	bl	80011ac <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d901      	bls.n	8009704 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e006      	b.n	8009712 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <RCCEx_PLL3_Config+0x15c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0f0      	beq.n	80096f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
 8009720:	ffff0007 	.word	0xffff0007

08009724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e049      	b.n	80097ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7f7 fb7c 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3304      	adds	r3, #4
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f000 faee 	bl	8009d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d001      	beq.n	80097ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e054      	b.n	8009896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0201 	orr.w	r2, r2, #1
 8009802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a26      	ldr	r2, [pc, #152]	; (80098a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d022      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009816:	d01d      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a22      	ldr	r2, [pc, #136]	; (80098a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d018      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a21      	ldr	r2, [pc, #132]	; (80098ac <HAL_TIM_Base_Start_IT+0xd8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d013      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00e      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1e      	ldr	r2, [pc, #120]	; (80098b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d009      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d004      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x80>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIM_Base_Start_IT+0xe8>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d115      	bne.n	8009880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <HAL_TIM_Base_Start_IT+0xec>)
 800985c:	4013      	ands	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b06      	cmp	r3, #6
 8009864:	d015      	beq.n	8009892 <HAL_TIM_Base_Start_IT+0xbe>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986c:	d011      	beq.n	8009892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 0201 	orr.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987e:	e008      	b.n	8009892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	e000      	b.n	8009894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	40000c00 	.word	0x40000c00
 80098b4:	40010400 	.word	0x40010400
 80098b8:	40001800 	.word	0x40001800
 80098bc:	40014000 	.word	0x40014000
 80098c0:	00010007 	.word	0x00010007

080098c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d122      	bne.n	8009920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d11b      	bne.n	8009920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0202 	mvn.w	r2, #2
 80098f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f9fe 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 800990c:	e005      	b.n	800991a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f9f0 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fa01 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b04      	cmp	r3, #4
 800992c:	d122      	bne.n	8009974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b04      	cmp	r3, #4
 800993a:	d11b      	bne.n	8009974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f06f 0204 	mvn.w	r2, #4
 8009944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f9d4 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 8009960:	e005      	b.n	800996e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f9c6 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f9d7 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b08      	cmp	r3, #8
 8009980:	d122      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b08      	cmp	r3, #8
 800998e:	d11b      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f06f 0208 	mvn.w	r2, #8
 8009998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2204      	movs	r2, #4
 800999e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f9aa 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 80099b4:	e005      	b.n	80099c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f99c 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f9ad 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f003 0310 	and.w	r3, r3, #16
 80099d2:	2b10      	cmp	r3, #16
 80099d4:	d122      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d11b      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f06f 0210 	mvn.w	r2, #16
 80099ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2208      	movs	r2, #8
 80099f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f980 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 8009a08:	e005      	b.n	8009a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f972 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f983 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d10e      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d107      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0201 	mvn.w	r2, #1
 8009a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7f6 fc48 	bl	80002d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d10e      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a60:	2b80      	cmp	r3, #128	; 0x80
 8009a62:	d107      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fb38 	bl	800a0e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a82:	d10e      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8e:	2b80      	cmp	r3, #128	; 0x80
 8009a90:	d107      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fb2b 	bl	800a0f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d10e      	bne.n	8009ace <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aba:	2b40      	cmp	r3, #64	; 0x40
 8009abc:	d107      	bne.n	8009ace <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f931 	bl	8009d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d10e      	bne.n	8009afa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d107      	bne.n	8009afa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f06f 0220 	mvn.w	r2, #32
 8009af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 faeb 	bl	800a0d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_TIM_ConfigClockSource+0x1c>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e0dc      	b.n	8009cda <HAL_TIM_ConfigClockSource+0x1d6>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	4b6a      	ldr	r3, [pc, #424]	; (8009ce4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a64      	ldr	r2, [pc, #400]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	f000 80a9 	beq.w	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009b5c:	4a62      	ldr	r2, [pc, #392]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	f200 80ae 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b64:	4a61      	ldr	r2, [pc, #388]	; (8009cec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	f000 80a1 	beq.w	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009b6c:	4a5f      	ldr	r2, [pc, #380]	; (8009cec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	f200 80a6 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b74:	4a5e      	ldr	r2, [pc, #376]	; (8009cf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	f000 8099 	beq.w	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009b7c:	4a5c      	ldr	r2, [pc, #368]	; (8009cf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	f200 809e 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b88:	f000 8091 	beq.w	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009b8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b90:	f200 8096 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b98:	f000 8089 	beq.w	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba0:	f200 808e 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba8:	d03e      	beq.n	8009c28 <HAL_TIM_ConfigClockSource+0x124>
 8009baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bae:	f200 8087 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb6:	f000 8086 	beq.w	8009cc6 <HAL_TIM_ConfigClockSource+0x1c2>
 8009bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bbe:	d87f      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bc0:	2b70      	cmp	r3, #112	; 0x70
 8009bc2:	d01a      	beq.n	8009bfa <HAL_TIM_ConfigClockSource+0xf6>
 8009bc4:	2b70      	cmp	r3, #112	; 0x70
 8009bc6:	d87b      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bc8:	2b60      	cmp	r3, #96	; 0x60
 8009bca:	d050      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x16a>
 8009bcc:	2b60      	cmp	r3, #96	; 0x60
 8009bce:	d877      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bd0:	2b50      	cmp	r3, #80	; 0x50
 8009bd2:	d03c      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x14a>
 8009bd4:	2b50      	cmp	r3, #80	; 0x50
 8009bd6:	d873      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bd8:	2b40      	cmp	r3, #64	; 0x40
 8009bda:	d058      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x18a>
 8009bdc:	2b40      	cmp	r3, #64	; 0x40
 8009bde:	d86f      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009be0:	2b30      	cmp	r3, #48	; 0x30
 8009be2:	d064      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009be4:	2b30      	cmp	r3, #48	; 0x30
 8009be6:	d86b      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d060      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	d867      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05c      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d05a      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x1aa>
 8009bf8:	e062      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	6899      	ldr	r1, [r3, #8]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f000 f9b3 	bl	8009f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	609a      	str	r2, [r3, #8]
      break;
 8009c26:	e04f      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	6899      	ldr	r1, [r3, #8]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f000 f99c 	bl	8009f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c4a:	609a      	str	r2, [r3, #8]
      break;
 8009c4c:	e03c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6859      	ldr	r1, [r3, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f000 f90c 	bl	8009e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2150      	movs	r1, #80	; 0x50
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f966 	bl	8009f38 <TIM_ITRx_SetConfig>
      break;
 8009c6c:	e02c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6859      	ldr	r1, [r3, #4]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f000 f92b 	bl	8009ed6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2160      	movs	r1, #96	; 0x60
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f956 	bl	8009f38 <TIM_ITRx_SetConfig>
      break;
 8009c8c:	e01c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6859      	ldr	r1, [r3, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f000 f8ec 	bl	8009e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2140      	movs	r1, #64	; 0x40
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f946 	bl	8009f38 <TIM_ITRx_SetConfig>
      break;
 8009cac:	e00c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f000 f93d 	bl	8009f38 <TIM_ITRx_SetConfig>
      break;
 8009cbe:	e003      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc4:	e000      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	ffceff88 	.word	0xffceff88
 8009ce8:	00100040 	.word	0x00100040
 8009cec:	00100030 	.word	0x00100030
 8009cf0:	00100020 	.word	0x00100020

08009cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a40      	ldr	r2, [pc, #256]	; (8009e58 <TIM_Base_SetConfig+0x114>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d013      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d62:	d00f      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a3d      	ldr	r2, [pc, #244]	; (8009e5c <TIM_Base_SetConfig+0x118>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00b      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a3c      	ldr	r2, [pc, #240]	; (8009e60 <TIM_Base_SetConfig+0x11c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d007      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a3b      	ldr	r2, [pc, #236]	; (8009e64 <TIM_Base_SetConfig+0x120>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d003      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a3a      	ldr	r2, [pc, #232]	; (8009e68 <TIM_Base_SetConfig+0x124>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d108      	bne.n	8009d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a2f      	ldr	r2, [pc, #188]	; (8009e58 <TIM_Base_SetConfig+0x114>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d01f      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da4:	d01b      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a2c      	ldr	r2, [pc, #176]	; (8009e5c <TIM_Base_SetConfig+0x118>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d017      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a2b      	ldr	r2, [pc, #172]	; (8009e60 <TIM_Base_SetConfig+0x11c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d013      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a2a      	ldr	r2, [pc, #168]	; (8009e64 <TIM_Base_SetConfig+0x120>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d00f      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a29      	ldr	r2, [pc, #164]	; (8009e68 <TIM_Base_SetConfig+0x124>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d00b      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a28      	ldr	r2, [pc, #160]	; (8009e6c <TIM_Base_SetConfig+0x128>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d007      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a27      	ldr	r2, [pc, #156]	; (8009e70 <TIM_Base_SetConfig+0x12c>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d003      	beq.n	8009dde <TIM_Base_SetConfig+0x9a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a26      	ldr	r2, [pc, #152]	; (8009e74 <TIM_Base_SetConfig+0x130>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d108      	bne.n	8009df0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a10      	ldr	r2, [pc, #64]	; (8009e58 <TIM_Base_SetConfig+0x114>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d00f      	beq.n	8009e3c <TIM_Base_SetConfig+0xf8>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a12      	ldr	r2, [pc, #72]	; (8009e68 <TIM_Base_SetConfig+0x124>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d00b      	beq.n	8009e3c <TIM_Base_SetConfig+0xf8>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a11      	ldr	r2, [pc, #68]	; (8009e6c <TIM_Base_SetConfig+0x128>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d007      	beq.n	8009e3c <TIM_Base_SetConfig+0xf8>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a10      	ldr	r2, [pc, #64]	; (8009e70 <TIM_Base_SetConfig+0x12c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d003      	beq.n	8009e3c <TIM_Base_SetConfig+0xf8>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a0f      	ldr	r2, [pc, #60]	; (8009e74 <TIM_Base_SetConfig+0x130>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d103      	bne.n	8009e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	691a      	ldr	r2, [r3, #16]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	615a      	str	r2, [r3, #20]
}
 8009e4a:	bf00      	nop
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40000400 	.word	0x40000400
 8009e60:	40000800 	.word	0x40000800
 8009e64:	40000c00 	.word	0x40000c00
 8009e68:	40010400 	.word	0x40010400
 8009e6c:	40014000 	.word	0x40014000
 8009e70:	40014400 	.word	0x40014400
 8009e74:	40014800 	.word	0x40014800

08009e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f023 0201 	bic.w	r2, r3, #1
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f023 030a 	bic.w	r3, r3, #10
 8009eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	621a      	str	r2, [r3, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b087      	sub	sp, #28
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	f023 0210 	bic.w	r2, r3, #16
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	031b      	lsls	r3, r3, #12
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	621a      	str	r2, [r3, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <TIM_ITRx_SetConfig+0x38>)
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	f043 0307 	orr.w	r3, r3, #7
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	609a      	str	r2, [r3, #8]
}
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	ffcfff8f 	.word	0xffcfff8f

08009f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	021a      	lsls	r2, r3, #8
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	431a      	orrs	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	609a      	str	r2, [r3, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d101      	bne.n	8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e06d      	b.n	800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a30      	ldr	r2, [pc, #192]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d004      	beq.n	800a000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a2f      	ldr	r2, [pc, #188]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d108      	bne.n	800a012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d022      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d01d      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d018      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1c      	ldr	r2, [pc, #112]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d013      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1a      	ldr	r2, [pc, #104]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00e      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d009      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d004      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a15      	ldr	r2, [pc, #84]	; (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d10c      	bne.n	800a096 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	40010000 	.word	0x40010000
 800a0b8:	40010400 	.word	0x40010400
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40001800 	.word	0x40001800
 800a0cc:	40014000 	.word	0x40014000

0800a0d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <__libc_init_array>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	4d0d      	ldr	r5, [pc, #52]	; (800a144 <__libc_init_array+0x38>)
 800a110:	4c0d      	ldr	r4, [pc, #52]	; (800a148 <__libc_init_array+0x3c>)
 800a112:	1b64      	subs	r4, r4, r5
 800a114:	10a4      	asrs	r4, r4, #2
 800a116:	2600      	movs	r6, #0
 800a118:	42a6      	cmp	r6, r4
 800a11a:	d109      	bne.n	800a130 <__libc_init_array+0x24>
 800a11c:	4d0b      	ldr	r5, [pc, #44]	; (800a14c <__libc_init_array+0x40>)
 800a11e:	4c0c      	ldr	r4, [pc, #48]	; (800a150 <__libc_init_array+0x44>)
 800a120:	f000 f82e 	bl	800a180 <_init>
 800a124:	1b64      	subs	r4, r4, r5
 800a126:	10a4      	asrs	r4, r4, #2
 800a128:	2600      	movs	r6, #0
 800a12a:	42a6      	cmp	r6, r4
 800a12c:	d105      	bne.n	800a13a <__libc_init_array+0x2e>
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	f855 3b04 	ldr.w	r3, [r5], #4
 800a134:	4798      	blx	r3
 800a136:	3601      	adds	r6, #1
 800a138:	e7ee      	b.n	800a118 <__libc_init_array+0xc>
 800a13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13e:	4798      	blx	r3
 800a140:	3601      	adds	r6, #1
 800a142:	e7f2      	b.n	800a12a <__libc_init_array+0x1e>
 800a144:	0800a20c 	.word	0x0800a20c
 800a148:	0800a20c 	.word	0x0800a20c
 800a14c:	0800a20c 	.word	0x0800a20c
 800a150:	0800a210 	.word	0x0800a210

0800a154 <memcpy>:
 800a154:	440a      	add	r2, r1
 800a156:	4291      	cmp	r1, r2
 800a158:	f100 33ff 	add.w	r3, r0, #4294967295
 800a15c:	d100      	bne.n	800a160 <memcpy+0xc>
 800a15e:	4770      	bx	lr
 800a160:	b510      	push	{r4, lr}
 800a162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a16a:	4291      	cmp	r1, r2
 800a16c:	d1f9      	bne.n	800a162 <memcpy+0xe>
 800a16e:	bd10      	pop	{r4, pc}

0800a170 <memset>:
 800a170:	4402      	add	r2, r0
 800a172:	4603      	mov	r3, r0
 800a174:	4293      	cmp	r3, r2
 800a176:	d100      	bne.n	800a17a <memset+0xa>
 800a178:	4770      	bx	lr
 800a17a:	f803 1b01 	strb.w	r1, [r3], #1
 800a17e:	e7f9      	b.n	800a174 <memset+0x4>

0800a180 <_init>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr

0800a18c <_fini>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr
